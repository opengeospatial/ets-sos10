<?xml version="1.0" encoding="UTF-8"?>
<ctl:package 
	xmlns:sosFunctions="https://cite.opengeospatial.org/sos-1.0.0/src/ctl/functions.xml"
	xmlns:getCapabilities="https://cite.opengeospatial.org/sos-1.0.0/src/ctl/GetCapabilities.xml"
	xmlns:describeSensor="https://cite.opengeospatial.org/sos-1.0.0/src/ctl/DescribeSensor.xml"
	xmlns:getObservation="https://cite.opengeospatial.org/sos-1.0.0/src/ctl/GetObservation.xml"
	xmlns:owsTests="https://www.cite.opengeospatial.org/ows-1.0/tests"
	xmlns:ctl="http://www.occamlab.com/ctl" 
	xmlns:html="http://www.w3.org/1999/xhtml" 	
	xmlns:saxon="http://saxon.sf.net/" 
	xmlns:tep="http://teamengine.sourceforge.net/parsers" 
	xmlns:xi="http://www.w3.org/2001/XInclude" 
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:parsers="http://www.occamlab.com/te/parsers"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
	xmlns:ows="http://www.opengis.net/ows/1.1" 
	xmlns:gml="http://www.opengis.net/gml" 
	xmlns:sos="http://www.opengis.net/sos/1.0"	
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
	xmlns:ogc="http://www.opengis.net/ogc"
	xmlns:om="http://www.opengis.net/om/1.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">


  <ctl:test name="sos:ows-main" isConformanceClass="true" isBasic="true">
    <ctl:param name="serviceURL" />
    <ctl:param name="exceptionReportSchema" />
    <ctl:param name="sosSchemaRoot"/>
    <ctl:param name="sosVersion"/>
    <ctl:assertion>All assertions for "ows" conformance are satisfied.</ctl:assertion>
    <ctl:comment>Test driver for the ows module.</ctl:comment>
    <ctl:link title="1. OWS">docs/sos/1.0/SOS 1.0 ATS.html#ows</ctl:link>
    <ctl:code>
      <ctl:message>***************************</ctl:message>
      <ctl:message>Running OWS Common Tests...</ctl:message>
      <ctl:message>***************************</ctl:message>
      <ctl:call-test name="owsTests:ows-main">
        <ctl:with-param name="serviceURL" select="$serviceURL"/>
        <ctl:with-param name="serviceType" select="string('SOS')"/>
        <ctl:with-param name="serviceVersion" select="$sosVersion" />
        <ctl:with-param name="capabilitiesRootElementName" select="string('Capabilities')" />
        <ctl:with-param name="capabilitiesResponseSchemaLocation" select="sosFunctions:schemaPath($sosSchemaRoot, $sosVersion,'sos', 'sosGetCapabilities.xsd')"/>
        <ctl:with-param name="capabilitiesResponseSchemaType" select="string('resource')" />
        <ctl:with-param name="capabilitiesResponseContentType" select="string('text/xml')" />
        <ctl:with-param name="exceptionReportSchemaLocation" select="$exceptionReportSchema"/>
        <ctl:with-param name="exceptionReportSchemaType" select="string('resource')" />
      </ctl:call-test>
    </ctl:code>
  </ctl:test>

  <ctl:test name="sos:general-main" isConformanceClass="true" isBasic="true">
    <ctl:param name="serviceURL" />
    <ctl:param name="isInteractive" />
    <ctl:param name="exceptionReportSchema" />
	<ctl:param name="sosSchemaRoot" />
	<ctl:param name="sosVersion" />
    <ctl:assertion>All assertions for "general" conformance are satisfied.</ctl:assertion>
    <ctl:comment>Test driver for the general module.</ctl:comment>
    <ctl:link title="2. General">docs/sos/1.0/SOS 1.0 ATS.html#general</ctl:link>
    <ctl:code>
      <ctl:message></ctl:message>
      <ctl:message>****************************</ctl:message>
      <ctl:message>Running General SOS Tests...</ctl:message>
      <ctl:message>****************************</ctl:message>
      <ctl:call-test name="sos:general-SOS.General-InvalidRequest.1">
        <ctl:with-param name="serviceURL" select="$serviceURL" />
        <ctl:with-param name="isInteractive" select="$isInteractive" />
        <ctl:with-param name="exceptionReportSchema" select="$exceptionReportSchema" />
		<ctl:with-param name="sosSchemaRoot" select="$sosSchemaRoot" />
		<ctl:with-param name="sosVersion" select="$sosVersion" />
      </ctl:call-test>
      <ctl:message>**********************************************************************</ctl:message>
      <ctl:call-test name="sos:general-SOS.General-ValidResponse.1">
        <ctl:with-param name="responseDocument" select="$serviceURL" />
      </ctl:call-test>
    </ctl:code>
  </ctl:test>
  <ctl:test name="sos:general-SOS.General-InvalidRequest.1" isConformanceClass="true" isBasic="true">
    <ctl:param name="serviceURL" />
    <ctl:param name="isInteractive" />
    <ctl:param name="exceptionReportSchema" />
	<ctl:param name="sosSchemaRoot" />
	<ctl:param name="sosVersion" />
    <!-- orig modified 2010-07-12 PwD
        <ctl:assertion>Sending a request that is non-conformant to a schema associated with an SOS operation 
        causes the server to return a valid error report message with an exceptionCode value of InvalidRequest.</ctl:assertion>
         <ctl:comment>Send several test documents that are invalid according to the schemas associated with some of the SOS operations
          (i.e. the mandatory operations). Pass if the service returns a valid exception message with an exceptionCode value of InvalidRequest; fail otherwise.</ctl:comment> 
      -->
    <ctl:assertion>Sending a request that is non-conformant to a schema associated with an SOS operation causes the server to return a valid error report message with an exceptionCode value of MissingParameterValue.</ctl:assertion>
    <ctl:comment>Send several test documents that are invalid according to the schemas associated with some of the SOS operations (i.e. the mandatory operations). Pass if the service returns a valid exception message with an exceptionCode value of InvalidParamterValue; fail otherwise.</ctl:comment>
    <ctl:link title="Verify that an invalid request produces an appropriate response from the server.">docs/sos/1.0/SOS 1.0 ATS.html#SOS.General-InvalidRequest</ctl:link>
    <ctl:code>
		<xsl:variable name="getCapabilitiesRequest">
			<ctl:request>
			  <ctl:url>
				<xsl:value-of select="$serviceURL"/>								
			  </ctl:url>
			  <ctl:method>get</ctl:method>	
			  <ctl:param name="request">GetCapabilities</ctl:param>
			  <ctl:param name="service">SOS</ctl:param> 
			  <ctl:param name="AcceptVersions">1.0.0</ctl:param><!-- OWS 1.1.0 p19 Although optional, client software should always include this parameter, to simplify version negotiation. -->
			  <ctl:call-function name="sosFunctions:xmlValidatingParser">					
				<ctl:with-param name="schemaFile" select="sosFunctions:schemaPath($sosSchemaRoot, $sosVersion,'sos', 'sosGetCapabilities.xsd')"/>
			  </ctl:call-function>

			</ctl:request>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="not($getCapabilitiesRequest/*) or $getCapabilitiesRequest//*[local-name() = 'ExceptionReport']">
				<ctl:message>GetCapabilites response document failed schema validation.</ctl:message>
				<ctl:message><xsl:value-of select="concat('Schema: ', sosFunctions:schemaPath($sosSchemaRoot, $sosVersion,'sos', 'sosGetCapabilities.xsd'))"/></ctl:message>
				<ctl:fail/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:choose>
					<xsl:when test="count($getCapabilitiesRequest//ows:Operation[@name='GetCapabilities']//ows:Post) = 0">
						<ctl:message>Post request is not support by service , pass this test.</ctl:message>
					</xsl:when>
					<xsl:otherwise>
						<xsl:variable name="GetCapabilitiesPostURL" select="sosFunctions:operationPostURL($getCapabilitiesRequest, 'GetCapabilities', $isInteractive)"/>
						<!--
								1.)  Issue several invalid request documents to the service.
								2.)  Validate the response against the ExceptionReport schema.
								3.)  If the response validates, then check that the exceptionCode value is "MissingParameterValue", not "InvalidRequest" (which is not specified as a valid exception code by the SOS spec)
							-->
						<ctl:message>Issuing an invalid request to:  <xsl:value-of select="$GetCapabilitiesPostURL" /></ctl:message>		     
						<ctl:message select="'The body of the request will be &quot;test&quot;'"/>
						<xsl:variable name="invalidRequestResponse">
							<ctl:request>
								<ctl:url>
								<xsl:value-of select="$GetCapabilitiesPostURL" />
								</ctl:url>
								<ctl:method>post</ctl:method>
								<ctl:body>test</ctl:body>
								<ctl:call-function name="sosFunctions:xmlValidatingParser">	
								<ctl:with-param name="schemaFile" select="$exceptionReportSchema"/>
								</ctl:call-function>
							</ctl:request>
						</xsl:variable>        
						<xsl:choose>
							<xsl:when test="not($invalidRequestResponse/*)">
								<ctl:message>FAILURE:  The server did not return a response to an invalid request or the response from the server was not a valid exception report.  The response from the server was:  "<xsl:copy-of select="$invalidRequestResponse/*" />"</ctl:message>
								<ctl:message select="concat('Schema file: ', $exceptionReportSchema)"/>
								<ctl:fail />
							</xsl:when>
							<xsl:otherwise>
								<ctl:message>The response was <xsl:value-of select="sosFunctions:getExceptionInfo($invalidRequestResponse)" /></ctl:message>
								<ctl:message>Checking the validity of the response to an invalid request.</ctl:message>
								<xsl:variable name="isCorrect">
									<ctl:call-function name="sosFunctions:checkExceptionReport">
										<ctl:with-param name="exceptionReport" select="$invalidRequestResponse" />
										<!--  orig modified 2010-07-12 PwD            
										<ctl:with-param name="exceptionCodeToCheck" select="string('InvalidRequest')" />
										-->
										<ctl:with-param name="exceptionCodeToCheck" select="string('MissingParameterValue')" />
										<ctl:with-param name="locatorToCheck" select="string('*')" />
									</ctl:call-function>
								</xsl:variable>
								<ctl:message>The validity check returned:  <xsl:value-of select="$isCorrect" /></ctl:message>
								<xsl:if test="not(xsd:boolean($isCorrect))">
									<!--  orig modified 2010-07-12 PwD                 
									<ctl:message>FAILURE:  The response to an invalid request was expected to be an exception report with an exceptionCode of "InvalidRequest" and a locator value containing the validation issue.  The returned exception report was:  "<xsl:value-of select="$invalidRequestResponse/*" />"</ctl:message>
									<ctl:message select="concat('Returned exception code was: &quot;', sosFunctions:exceptionCode($invalidRequestResponse), '&quot;')"/>
									<ctl:message select="'Expected exception code was: &quot;InvalidRequest&quot;'"/>
									-->					
										<ctl:message>FAILURE:  The response to an invalid request was expected to be an exception report with an exceptionCode of "MissingParameterValue" and a locator value containing the validation issue.  The returned exception report was:  "<xsl:value-of select="$invalidRequestResponse/*" />"</ctl:message>
										<ctl:message select="concat('Returned exception code was: &quot;', sosFunctions:exceptionCode($invalidRequestResponse), '&quot;')"/>
										<ctl:message select="'Expected exception code was: &quot;MissingParameterValue&quot;'"/>
									<ctl:fail />
								</xsl:if>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:otherwise>
		</xsl:choose>
    </ctl:code>
  </ctl:test>
  <ctl:test name="sos:general-SOS.General-ValidResponse.1" isConformanceClass="true" isBasic="true">
    <ctl:param name="responseDocument" />
    <ctl:assertion>A response is a valid response for the SOS.  This general assertion should be tested by all other tests.</ctl:assertion>
    <ctl:comment>Tested through other tests.</ctl:comment>
    <ctl:link title="Verify that a response entity is schema-valid">docs/sos/1.0/SOS 1.0 ATS.html#SOS.General-ValidResponse</ctl:link>
    <ctl:code>
      <ctl:message>This general assertion is tested by all other tests, so there is nothing specific to test now.</ctl:message>
    </ctl:code>
  </ctl:test>

  <ctl:test name="sos:core-main" isConformanceClass="true" isBasic="true">
    <ctl:param name="serviceURL"/>
    <ctl:param name="isInteractive" />
    <ctl:param name="ogcSchemaRoot"/>
    <ctl:param name="exceptionReportSchema"/>
    <ctl:param name="sosSchemaRoot"/>
    <ctl:param name="sosVersion"/>
    <!-- Following parameters added 2010-12-30 PwD -->	
    <ctl:param name="run-sos-gc-kvp-rph"/>
    <ctl:param name="run-sos-gc-kvp-rsph"/>
    <ctl:param name="run-sos-gc-kvp-rrph"/>
    <ctl:param name="run-sos-gc-ommo"/>
    <ctl:param name="run-sos-gc-omoo"/>
    <ctl:param name="run-sos-gc-rcvt"/>
    <ctl:param name="run-sos-gc-rcvp"/>
    <ctl:param name="run-sos-gc-rcvop"/>
    <ctl:param name="run-sos-gc-rcvrf"/>
    <ctl:param name="run-sos-gc-rcvrm"/>
    <ctl:param name="run-sos-gc-rcvrm2"/>
    <ctl:param name="run-sos-ds-rimt"/>
    <ctl:param name="run-sos-ds-rip"/>
    <ctl:param name="run-sos-ds-rmrf"/>
    <ctl:param name="run-sos-ds-rmp"/>
    <ctl:param name="run-sos-go-risn"/>
    <ctl:param name="run-sos-go-rio"/>
    <ctl:param name="run-sos-go-riet"/>
    <ctl:param name="run-sos-go-rip"/>
    <ctl:param name="run-sos-go-rifoi"/>
    <ctl:param name="run-sos-go-riop"/>
    <ctl:param name="run-sos-go-rir"/>
    <ctl:param name="run-sos-go-rirf"/>
    <ctl:param name="run-sos-go-rirm"/>
    <ctl:param name="run-sos-go-rirm2"/>
    <ctl:param name="run-sos-go-rmsd"/>
    <ctl:param name="run-sos-go-rmpd"/>
    <ctl:param name="run-sos-go-rmopd"/>
    <ctl:param name="run-sos-go-raetd"/>
    <ctl:param name="run-sos-go-rmetd"/>
    <ctl:param name="run-sos-go-rmfoid"/>
    <ctl:param name="run-sos-go-rmrd"/>
    <ctl:param name="run-sos-go-rmrfd"/>


    <ctl:assertion>All assertions for "core" conformance are satisfied.</ctl:assertion>
    <ctl:comment>Test driver for the core module.</ctl:comment>
    <ctl:link title="3. Core">docs/sos/1.0/SOS 1.0 ATS.html#core</ctl:link>
    <ctl:code>	
      <!-- Following variables and messages added 2010-12-30 PwD -->	
      <xsl:variable name="run-gc-tests" select="$run-sos-gc-kvp-rph eq 'true' or 
															$run-sos-gc-kvp-rsph eq 'true' or 
															$run-sos-gc-kvp-rrph eq 'true' or 
															$run-sos-gc-ommo eq 'true' or 
															$run-sos-gc-omoo eq 'true' or 
															$run-sos-gc-rcvt eq 'true' or 
															$run-sos-gc-rcvp eq 'true' or 
															$run-sos-gc-rcvop eq 'true' or 
															$run-sos-gc-rcvrf eq 'true' or 
															$run-sos-gc-rcvrm eq 'true' or 
															$run-sos-gc-rcvrm2 eq 'true'"/>
      <xsl:variable name="run-ds-tests" select="$run-sos-ds-rimt eq 'true' or 
															$run-sos-ds-rip eq 'true' or 
															$run-sos-ds-rmrf eq 'true' or 
															$run-sos-ds-rmp eq 'true'"/>
      <xsl:variable name="run-go-tests" select="$run-sos-go-risn eq 'true' or 
															$run-sos-go-riet eq 'true' or 
															$run-sos-go-rip eq 'true' or 
															$run-sos-go-rifoi eq 'true' or 
															$run-sos-go-riop eq 'true' or 
															$run-sos-go-rir eq 'true' or 
															$run-sos-go-rirf eq 'true' or 
															$run-sos-go-rirm eq 'true' or 
															$run-sos-go-rirm2 eq 'true' or 
															$run-sos-go-rmsd eq 'true' or 
															$run-sos-go-rmpd eq 'true' or 
															$run-sos-go-rmopd eq 'true' or 
															$run-sos-go-raetd eq 'true' or 
															$run-sos-go-rmetd eq 'true' or 
															$run-sos-go-rmfoid eq 'true' or 
															$run-sos-go-rmrd eq 'true' or 
															$run-sos-go-rmrfd eq 'true'"/>
      <ctl:message select="'********************************************************'"/>
      <ctl:message select="''"/>
      <ctl:message>In sos:core-main</ctl:message>
      <ctl:message select="concat('run-gc-tests: ',$run-gc-tests)"/>	
      <xsl:if test="$run-gc-tests">
        <ctl:message select="concat('run sos-gc-kvp-rph: ',$run-sos-gc-kvp-rph)"/>
        <ctl:message select="concat('run sos-gc-kvp-rsph: ',$run-sos-gc-kvp-rsph)"/>
        <ctl:message select="concat('run sos-gc-kvp-rrph: ',$run-sos-gc-kvp-rrph)"/>
        <ctl:message select="concat('run sos-gc-ommo: ',$run-sos-gc-ommo)"/>
        <ctl:message select="concat('run sos-gc-omoo: ',$run-sos-gc-omoo)"/>
        <ctl:message select="concat('run sos-gc-rcvt: ',$run-sos-gc-rcvt)"/>
        <ctl:message select="concat('run sos-gc-rcvp: ',$run-sos-gc-rcvp)"/>
        <ctl:message select="concat('run sos-gc-rcvop: ',$run-sos-gc-rcvop)"/>
        <ctl:message select="concat('run sos-gc-rcvrf: ',$run-sos-gc-rcvrf)"/>
        <ctl:message select="concat('run sos-gc-rcvrm: ',$run-sos-gc-rcvrm)"/>
        <ctl:message select="concat('run sos-gc-rcvrm2: ',$run-sos-gc-rcvrm2)"/>		
      </xsl:if>			
      <ctl:message select="concat('run-ds-tests: ',$run-ds-tests)"/>
      <xsl:if test="$run-ds-tests">
        <ctl:message select="concat('run sos-ds-rimt: ',$run-sos-ds-rimt)"/>
        <ctl:message select="concat('run sos-ds-rip: ',$run-sos-ds-rip)"/>
        <ctl:message select="concat('run sos-ds-rmrf: ',$run-sos-ds-rmrf)"/>
        <ctl:message select="concat('run sos-ds-rmp ',$run-sos-ds-rmp)"/>
      </xsl:if>
      <ctl:message select="concat('run-go-tests: ',$run-go-tests)"/>	
      <xsl:if test="$run-go-tests">
        <ctl:message select="concat('run sos-go-risn: ',$run-sos-go-risn)"/>
        <ctl:message select="concat('run sos-go-rio: ',$run-sos-go-rio)"/>
        <ctl:message select="concat('run sos-go-riet ',$run-sos-go-riet)"/>
        <ctl:message select="concat('run sos-go-rip: ',$run-sos-go-rip)"/>
        <ctl:message select="concat('run sos-go-rifoi: ',$run-sos-go-rifoi)"/>
        <ctl:message select="concat('run sos-go-riop: ',$run-sos-go-riop)"/>
        <ctl:message select="concat('run sos-go-rir ',$run-sos-go-rir)"/>
        <ctl:message select="concat('run sos-go-rirf: ',$run-sos-go-rirf)"/>
        <ctl:message select="concat('run sos-go-rirm: ',$run-sos-go-rirm)"/>
        <ctl:message select="concat('run sos-go-rirm2: ',$run-sos-go-rirm2)"/>
        <ctl:message select="concat('run sos-go-rmsd: ',$run-sos-go-rmsd)"/>
        <ctl:message select="concat('run sos-go-rmpd: ',$run-sos-go-rmpd)"/>
        <ctl:message select="concat('run sos-go-rmopd: ',$run-sos-go-rmopd)"/>
        <ctl:message select="concat('run sos-go-raetd: ',$run-sos-go-raetd)"/>
        <ctl:message select="concat('run sos-go-rmetd: ',$run-sos-go-rmetd)"/>
        <ctl:message select="concat('run sos-go-rmfoid: ',$run-sos-go-rmfoid)"/>
        <ctl:message select="concat('run sos-go-rmrd: ',$run-sos-go-rmrd)"/>
        <ctl:message select="concat('run sos-go-rmrfd: ',$run-sos-go-rmrfd)"/>				
      </xsl:if>			
      <ctl:message></ctl:message>

      <ctl:message select="'********************************************************'"/>
      <ctl:message select="''"/>				
      <ctl:message select="'A request for a valid capabilities document will now be made.'"/>
      <ctl:message select="'The optional &quot;version&quot; parameter will be omitted.'"/>
      <ctl:message select="'If this response passes schema validation, further tests will be performed on the GetCapabilities response.'"/>
      <ctl:message select="'If it fails schema validation, testing will stop.'"/>
      <ctl:message select="'Validating...'"/>
      <xsl:variable name="getCapabilitiesRequest">
        <ctl:request>
          <ctl:url>
            <xsl:value-of select="$serviceURL"/>								
          </ctl:url>
          <ctl:method>get</ctl:method>	
          <ctl:param name="request">GetCapabilities</ctl:param>
          <ctl:param name="service">SOS</ctl:param> 
		  <ctl:param name="AcceptVersions">1.0.0</ctl:param><!-- OWS 1.1.0 p19 Although optional, client software should always include this parameter, to simplify version negotiation. -->
          <ctl:call-function name="sosFunctions:xmlValidatingParser">					
            <ctl:with-param name="schemaFile" select="sosFunctions:schemaPath($sosSchemaRoot, $sosVersion,'sos', 'sosGetCapabilities.xsd')"/>
          </ctl:call-function>

        </ctl:request>
      </xsl:variable>

      <xsl:choose>

        <!-- was <xsl:when test="not($getCapabilitiesRequest/*)">  2010-12-18 PwD -->
        <xsl:when test="not($getCapabilitiesRequest/*) or $getCapabilitiesRequest//*[local-name() = 'ExceptionReport']">
          <ctl:message>GetCapabilites response document failed schema validation.</ctl:message>
          <ctl:message><xsl:value-of select="concat('Schema: ', sosFunctions:schemaPath($sosSchemaRoot, $sosVersion,'sos', 'sosGetCapabilities.xsd'))"/></ctl:message>
          <ctl:fail/>
        </xsl:when>
        <!--  				<xsl:when test="not(string(node-name($getCapabilitiesRequest/*))='sos:Capabilities')">
						<ctl:message>Root element name was not "sos:Capabilities".</ctl:message>
						<ctl:message select="concat('Root element name was: &quot;', string(node-name($getCapabilitiesRequest/*)), '&quot;')"/>
						<ctl:fail/>
					</xsl:when>		-->	
        <xsl:otherwise>
          <ctl:message select="'********************************************************'"/>
          <ctl:message select="''"/>					
          <ctl:message>Capabilities response is valid, continuing...</ctl:message>
          <ctl:message select="''"/>	

          <xsl:if test="$run-sos-gc-kvp-rph eq 'true'"> <!-- 2010-12-30 PwD -->
            <ctl:message></ctl:message>
            <ctl:message select="'********************************************************'"/>
            <ctl:message select="''"/>						
            <ctl:call-test name="getCapabilities:core-SOS.GetCapabilities-KVPRequestParameterHandling.1">
              <ctl:with-param name="serviceURL" select="$serviceURL"/>
              <ctl:with-param name="exceptionReportSchema" select="$exceptionReportSchema"/>
            </ctl:call-test>
          </xsl:if>

          <xsl:if test="$run-sos-gc-kvp-rsph eq 'true'"> <!-- 2010-12-30 PwD -->
            <ctl:message></ctl:message>
            <ctl:message select="'********************************************************'"/>
            <ctl:message select="''"/>
            <ctl:call-test name="getCapabilities:core-SOS.GetCapabilities-KVPRequestServiceParameterHandling.1">
              <ctl:with-param name="serviceURL" select="$serviceURL"/>
              <ctl:with-param name="exceptionReportSchema" select="$exceptionReportSchema"/>
            </ctl:call-test>
          </xsl:if>

          <xsl:if test="$run-sos-gc-kvp-rrph eq 'true'"> <!-- 2010-12-30 PwD -->
            <ctl:message select="'********************************************************'"/>
            <ctl:message select="''"/>		
            <ctl:call-test name="getCapabilities:core-SOS.GetCapabilities-KVPRequestRequestParameterHandling.1">
              <ctl:with-param name="serviceURL" select="$serviceURL"/>
              <ctl:with-param name="exceptionReportSchema" select="$exceptionReportSchema"/>
            </ctl:call-test>
          </xsl:if>

          <xsl:if test="$run-sos-gc-ommo eq 'true'"> <!-- 2010-12-30 PwD -->
            <ctl:message select="'********************************************************'"/>
            <ctl:message select="''"/>						
            <ctl:call-test name="getCapabilities:core-SOS.GetCapabilities-OperationsMetadataMandatoryOperations.1">
              <ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
            </ctl:call-test>
          </xsl:if>

          <xsl:if test="$run-sos-gc-omoo eq 'true'"> <!-- 2010-12-30 PwD -->
            <ctl:message select="'********************************************************'"/>
            <ctl:message select="''"/>												
            <ctl:call-test name="getCapabilities:core-SOS.GetCapabilities-OperationsMetadaOptionalOperations.1">
              <ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
            </ctl:call-test>
          </xsl:if>

          <xsl:if test="$run-sos-gc-rcvt eq 'true'"> <!-- 2010-12-30 PwD -->
            <ctl:message select="'********************************************************'"/>
            <ctl:message select="''"/>						
            <ctl:call-test name="getCapabilities:core-SOS.GetCapabilities-ResponseContentsValidTime.1">
              <ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
            </ctl:call-test>
          </xsl:if>

          <xsl:if test="$run-sos-gc-rcvp eq 'true'"> <!-- 2010-12-30 PwD -->
            <ctl:message select="'********************************************************'"/>
            <ctl:message select="''"/>							
            <ctl:call-test name="getCapabilities:core-SOS.GetCapabilities-ResponseContentsValidProcedure.1">
              <ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
            </ctl:call-test>
          </xsl:if>

          <xsl:if test="$run-sos-gc-rcvop eq 'true'"> <!-- 2010-12-30 PwD -->
            <ctl:message select="'********************************************************'"/>
            <ctl:message select="''"/>												
            <ctl:call-test name="getCapabilities:core-SOS.GetCapabilities-ResponseContentsValidObservedProperty.1">
              <ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
            </ctl:call-test>
          </xsl:if>

          <xsl:if test="$run-sos-gc-rcvrf eq 'true'"> <!-- 2010-12-30 PwD -->
            <ctl:message select="'********************************************************'"/>
            <ctl:message select="''"/>												
            <ctl:call-test name="getCapabilities:core-SOS.GetCapabilities-ResponseContentsValidResponseFormat.1">
              <ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
            </ctl:call-test>
          </xsl:if>

          <xsl:if test="$run-sos-gc-rcvrm eq 'true'"> <!-- 2010-12-30 PwD -->
            <ctl:message select="'********************************************************'"/>
            <ctl:message select="''"/>												
            <ctl:call-test name="getCapabilities:core-SOS.GetCapabilities-ResponseContentsValidResultModel.1">
              <ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
            </ctl:call-test>
          </xsl:if>

          <xsl:if test="$run-sos-gc-rcvrm2 eq 'true'"> <!-- 2010-12-30 PwD -->
            <ctl:message select="'********************************************************'"/>
            <ctl:message select="''"/>												
            <ctl:call-test name="getCapabilities:core-SOS.GetCapabilities-ResponseContentsValidResponseMode.1">
              <ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
            </ctl:call-test>
          </xsl:if>

          <xsl:if test="$run-ds-tests"> <!-- 2010-12-30 PwD -->
            <!--********************   Create variables for DescribeSensor **********************************-->		
            <xsl:variable name="describeSensorPostURL" select="sosFunctions:operationPostURL($getCapabilitiesRequest, 'DescribeSensor', $isInteractive)"/>

            <xsl:variable name="describeSensorVersion" select="sosFunctions:operationVersion($getCapabilitiesRequest, 'DescribeSensor')"/>
            <xsl:variable name="describeSensorProcedure" select="sosFunctions:describeSensorFirstProcedure($getCapabilitiesRequest)"/>
            <xsl:variable name="describeSensorOutputFormat" select="sosFunctions:describeSensorOutputFormat($getCapabilitiesRequest)"/>						
            <xsl:variable name="describeSensorSchemaFile" select="sosFunctions:schemaPathFromMimeType($ogcSchemaRoot, $describeSensorOutputFormat)"/>

            <ctl:message></ctl:message>
            <ctl:message select="'*********************************'"/>	
            <ctl:message select="'*     Describe Sensor Tests 	  *'"/>
            <ctl:message select="'*********************************'"/>
            <ctl:message select="concat('All DescribeSensor tests will use the &quot;Post&quot; method at the following url: ', $describeSensorPostURL)"/>
            <ctl:message select="'This url was obtained from the GetCapabilities response'"/>
            <ctl:message select="''"/>												

            <xsl:choose>															
              <xsl:when test="not($describeSensorPostURL)">
                <ctl:message>Failure</ctl:message>
                <ctl:message select="'This service does not implement the &quot;POST&quot; for the DescribeSensor operation.'"/>
                <ctl:message select="'The POST method must be implemented.'"/>
                <ctl:fail/>
              </xsl:when>
              <!-- don't do anymore describeSensor tests if advertised describe sensor outputFormat is not valid -->
              <xsl:when test="sosFunctions:isValidMIMETypeFormat($describeSensorOutputFormat) = 'false'">								
                <ctl:message>Failure</ctl:message>
                <ctl:message select="concat('The outputFormat advertised for the DescribeSensor operation is invalid: ', $describeSensorOutputFormat)"/>
                <ctl:message select="'The encoding, subtype and version must all be specified.'"/>
                <ctl:message select="'No further describe sensor tests will be run until this is rectified'"/>
                <ctl:fail/>
              </xsl:when>

              <xsl:otherwise>

                <xsl:if test="$run-sos-ds-rimt eq 'true'"> <!-- 2010-12-30 PwD -->
                  <ctl:message select="'********************************************************'"/>
                  <ctl:message select="''"/>												
                  <ctl:call-test name="describeSensor:core-SOS.DescribeSensor-RequestInvalidMIMEType.1">							
                    <ctl:with-param name="exceptionReportSchema" select="$exceptionReportSchema"/>
                    <ctl:with-param name="postURL" select="$describeSensorPostURL"/>
                    <ctl:with-param name="describeSensorVersion" select="$describeSensorVersion"/>
                    <ctl:with-param name="procedure" select="$describeSensorProcedure"/>						
                  </ctl:call-test>
                </xsl:if>
                <xsl:if test="$run-sos-ds-rip eq 'true'"> <!-- 2010-12-30 PwD -->		
                  <ctl:message select="'********************************************************'"/>
                  <ctl:message select="''"/>						
                  <ctl:call-test name="describeSensor:core-SOS.DescribeSensor-RequestInvalidProcedure.1">									
                    <ctl:with-param name="postURL" select="$describeSensorPostURL"/>
                    <ctl:with-param name="describeSensorVersion" select="$describeSensorVersion"/>
                    <ctl:with-param name="outputFormat" select="$describeSensorOutputFormat"/>
                    <ctl:with-param name="exceptionReportSchema" select="$exceptionReportSchema"/>									
                  </ctl:call-test>
                </xsl:if>
                <xsl:if test="$run-sos-ds-rmrf eq 'true'"> <!-- 2010-12-30 PwD -->		
                  <ctl:message select="'********************************************************'"/>
                  <ctl:message select="''"/>															
                  <ctl:call-test name="describeSensor:core-SOS.DescribeSensor-ResponseMatchingResponseFormat.1">
                    <ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
                    <ctl:with-param name="postURL" select="$describeSensorPostURL"/>
                    <ctl:with-param name="describeSensorVersion" select="$describeSensorVersion"/>
                    <ctl:with-param name="outputFormat" select="$describeSensorOutputFormat"/>
                    <ctl:with-param name="schemaFile" select="$describeSensorSchemaFile"/>																	
                  </ctl:call-test>
                </xsl:if>		
                <xsl:if test="$run-sos-ds-rmp eq 'true'"> <!-- 2010-12-30 PwD -->		
                  <ctl:message select="'********************************************************'"/>
                  <ctl:message select="''"/>									
                  <ctl:call-test name="describeSensor:core-SOS.DescribeSensor-ResponseMatchingProcedure.1">								
                    <ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
                    <ctl:with-param name="postURL" select="$describeSensorPostURL"/>
                    <ctl:with-param name="describeSensorVersion" select="$describeSensorVersion"/>
                    <ctl:with-param name="outputFormat" select="$describeSensorOutputFormat"/>
                    <ctl:with-param name="schemaFile" select="$describeSensorSchemaFile"/>	
                  </ctl:call-test>
                </xsl:if>									
              </xsl:otherwise>
            </xsl:choose>
          </xsl:if>
          <ctl:msg select="concat('test to run run-go-tests: ',$run-go-tests)"/>
          <xsl:if test="$run-go-tests or string($run-go-tests) eq 'true' "> <!-- 2010-12-30 PwD -->						
            <!--********************   Create variables for GetObservation **********************************-->	
            <xsl:variable name="getObservationPostURL" select="sosFunctions:operationPostURL($getCapabilitiesRequest, 'GetObservation', isInteractive)"/>
            <xsl:variable name="getObservationVersion" select="sosFunctions:operationVersion($getCapabilitiesRequest, 'GetObservation')"/>
            <xsl:variable name="offeringId"	select="sosFunctions:capabilitiesFirstOfferingId($getCapabilitiesRequest)"/>
            <xsl:variable name="offeringName" select="sosFunctions:capabilitiesOfferingName($getCapabilitiesRequest, $offeringId)"/> <!-- need gml:name URN to get observation PwD 2010-12-21 -->			
            <xsl:variable name="observationOfferingResponseFormat" select="sosFunctions:observationOfferingResponseFormat($getCapabilitiesRequest, $offeringId)"/>
            <!-- <xsl:variable name="observationOfferingObservedProperty" select="sosFunctions:observationOfferingObservedProperty($getCapabilitiesRequest, $offeringId)"/>	 PwD  2010-12-27 -->				
            <xsl:variable name="observationOfferingObservedProperty" select="sosFunctions:observationOfferingObservedPropertyAsTextXML($getCapabilitiesRequest,
                                                                                                                                        $isInteractive,
																																		$offeringId,
																																		$offeringName,
																																		$getObservationVersion,
																																		$observationOfferingResponseFormat)"/> <!--  PwD  2010-12-27 -->
            <xsl:variable name="compareOperatorElement" select="sosFunctions:resultComparisonOperatorElement($getCapabilitiesRequest)"/>
            <ctl:message></ctl:message>
            <ctl:message select="'*********************************'"/>	
            <ctl:message select="'*     GetObservation Tests 	  *'"/>
            <ctl:message select="'*********************************'"/>
            <ctl:message select="concat('All GetObservation tests will use the &quot;Post&quot; method at the following url: ', $getObservationPostURL)"/>
            <ctl:message select="'This url was obtained from the GetCapabilities response'"/>
            <ctl:message select="''"/>

            <xsl:choose>

              <xsl:when test="not($getObservationPostURL)">
                <ctl:message>Failure</ctl:message>
                <ctl:message select="'This service does not implement the &quot;POST&quot; for the GetObservation operation.'"/>
                <ctl:message select="'The POST method must be implemented.'"/>
                <ctl:fail/>
              </xsl:when>

              <xsl:when test="count($getCapabilitiesRequest//sos:ObservationOffering//sos:responseFormat[starts-with(.,'text/xml') and sosFunctions:isValidMIMETypeFormat(.) = 'false'])>0">
                <ctl:message select="'Failure'"/>
                <ctl:message select="'One or more text/xml responseFormats for one or more offerings is invalid.'"/>
                <ctl:message select="'The encoding, subtype and version must all be specified.'"/>
                <ctl:message select="'No GetObservation tests will be run until this is rectified'"/>
                <ctl:message select="'See reults of test &quot;GetCapabilities-ResponseContentsValidResponseFormat&quot; for details'"/>
                <ctl:fail/>
              </xsl:when>

              <xsl:when test="not($offeringId)">
                <ctl:message>Failure</ctl:message>
                <ctl:message select="'There are no offerings with valid begin and end times.'"/>
                <ctl:message select="'At least one offering must have observations.'"/>
                <ctl:message select="'The SOS must have observations in order to be tested.'"/>
                <ctl:fail/>
              </xsl:when>

              <xsl:otherwise>											
                <xsl:if test="$run-sos-go-risn eq 'true'"> <!-- 2010-12-30 PwD -->			
                  <ctl:message select="'********************************************************'"/>
                  <ctl:message select="''"/>									
                  <ctl:call-test name="getObservation:core-SOS.GetObservation-RequestInvalidSRSName.1">
                    <ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
                    <ctl:with-param name="exceptionReportSchema" select="$exceptionReportSchema"/>
                    <ctl:with-param name="postURL" select="$getObservationPostURL"/>
                    <ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
                    <ctl:with-param name="responseFormat" select="$observationOfferingResponseFormat"/>					
                    <ctl:with-param name="observedProperty" select="$observationOfferingObservedProperty"/>	
                    <ctl:with-param name="offeringId" select="$offeringId"/>	<!-- Rocky change 2011-09-05,need gml:name URN to get observation PwD 2010-12-21 -->
                    <ctl:with-param name="offeringName" select="$offeringName"/>
                  </ctl:call-test>
                </xsl:if>
                <xsl:if test="$run-sos-go-rio eq 'true'"> <!-- 2010-12-30 PwD -->			
                  <ctl:message select="'********************************************************'"/>
                  <ctl:message select="''"/>															
                  <ctl:call-test name="getObservation:core-SOS.GetObservation-RequestInvalidOffering.1">
                    <ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
                    <ctl:with-param name="exceptionReportSchema" select="$exceptionReportSchema"/>
                    <ctl:with-param name="postURL" select="$getObservationPostURL"/>
                    <ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
                    <ctl:with-param name="responseFormat" select="$observationOfferingResponseFormat"/>					
                    <ctl:with-param name="observedProperty" select="$observationOfferingObservedProperty"/>
                  </ctl:call-test>
                </xsl:if>
                <xsl:if test="$run-sos-go-riet eq 'true'"> <!-- 2010-12-30 PwD -->											
                  <ctl:message select="'********************************************************'"/>
                  <ctl:message select="''"/>																					
                  <ctl:call-test name="getObservation:core-SOS.GetObservation-RequestInvalidEventTime.1">
                    <ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
                    <ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
                    <ctl:with-param name="exceptionReportSchema" select="$exceptionReportSchema"/>
                    <ctl:with-param name="postURL" select="$getObservationPostURL"/>
                    <ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
                    <ctl:with-param name="responseFormat" select="$observationOfferingResponseFormat"/>					
                    <ctl:with-param name="observedProperty" select="$observationOfferingObservedProperty"/>	
                    <ctl:with-param name="offeringId" select="$offeringId"/>
                    <ctl:with-param name="offeringName" select="$offeringName"/> <!-- need gml:name URN to get observation PwD 2010-12-21 -->
                  </ctl:call-test>	
                </xsl:if>
                <xsl:if test="$run-sos-go-rip eq 'true'"> <!-- 2010-12-30 PwD -->			
                  <ctl:message select="'********************************************************'"/>
                  <ctl:message select="''"/>																					
                  <ctl:call-test name="getObservation:core-SOS.GetObservation-RequestInvalidProcedure.1">						
                    <ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
                    <ctl:with-param name="exceptionReportSchema" select="$exceptionReportSchema"/>
                    <ctl:with-param name="postURL" select="$getObservationPostURL"/>
                    <ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
                    <ctl:with-param name="responseFormat" select="$observationOfferingResponseFormat"/>					
                    <ctl:with-param name="observedProperty" select="$observationOfferingObservedProperty"/>	
                    <ctl:with-param name="offeringId" select="$offeringId"/>	<!-- Rocky change 2011-09-05,need gml:name URN to get observation PwD 2010-12-21 -->
                    <ctl:with-param name="offeringName" select="$offeringName"/>
                  </ctl:call-test>
                </xsl:if>
                <xsl:if test="$run-sos-go-rifoi eq 'true'"> <!-- 2010-12-30 PwD -->			
                  <ctl:message select="'********************************************************'"/>
                  <ctl:message select="''"/>																					
                  <ctl:call-test name="getObservation:core-SOS.GetObservation-RequestInvalidFeatureOfInterest.1">
                    <ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
                    <ctl:with-param name="exceptionReportSchema" select="$exceptionReportSchema"/>
                    <ctl:with-param name="postURL" select="$getObservationPostURL"/>
                    <ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
                    <ctl:with-param name="responseFormat" select="$observationOfferingResponseFormat"/>					
                    <ctl:with-param name="observedProperty" select="$observationOfferingObservedProperty"/>	
                    <ctl:with-param name="offeringId" select="$offeringId"/>	<!-- Rocky change 2011-09-05,need gml:name URN to get observation PwD 2010-12-21 -->
                    <ctl:with-param name="offeringName" select="$offeringName"/>
                  </ctl:call-test>
                </xsl:if>
                <xsl:if test="$run-sos-go-riop eq 'true'"> <!-- 2010-12-30 PwD -->			
                  <ctl:message select="'********************************************************'"/>
                  <ctl:message select="''"/>																					
                  <ctl:call-test name="getObservation:core-SOS.GetObservation-RequestInvalidObservedProperty.1">
                    <ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
                    <ctl:with-param name="exceptionReportSchema" select="$exceptionReportSchema"/>
                    <ctl:with-param name="postURL" select="$getObservationPostURL"/>
                    <ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
                    <ctl:with-param name="responseFormat" select="$observationOfferingResponseFormat"/>					
                    <ctl:with-param name="observedProperty" select="$observationOfferingObservedProperty"/>	
                    <ctl:with-param name="offeringId" select="$offeringId"/>	<!-- Rocky change 2011-09-05,need gml:name URN to get observation PwD 2010-12-21 -->
                    <ctl:with-param name="offeringName" select="$offeringName"/>
                  </ctl:call-test>	
                </xsl:if>
                <xsl:if test="$run-sos-go-rir eq 'true'"> <!-- 2010-12-30 PwD -->			
                  <ctl:message select="'********************************************************'"/>
                  <ctl:message select="''"/>							
                  <ctl:call-test name="getObservation:core-SOS.GetObservation-RequestInvalidResult.1">
                    <ctl:with-param name="compareOperatorElement" select="$compareOperatorElement"/>
                    <ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
                    <ctl:with-param name="exceptionReportSchema" select="$exceptionReportSchema"/>
                    <ctl:with-param name="postURL" select="$getObservationPostURL"/>
                    <ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
                    <ctl:with-param name="responseFormat" select="$observationOfferingResponseFormat"/>					
                    <ctl:with-param name="observedProperty" select="$observationOfferingObservedProperty"/>	
                    <ctl:with-param name="offeringId" select="$offeringId"/>	<!-- Rocky change 2011-09-05,need gml:name URN to get observation PwD 2010-12-21 -->
                    <ctl:with-param name="offeringName" select="$offeringName"/>
                  </ctl:call-test>
                </xsl:if>
                <xsl:if test="$run-sos-go-rirf eq 'true'"> <!-- 2010-12-30 PwD -->			
                  <ctl:message select="'********************************************************'"/>
                  <ctl:message select="''"/>						
                  <ctl:call-test name="getObservation:core-SOS.GetObservation-RequestInvalidResponseFormat.1">
                    <ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
                    <ctl:with-param name="exceptionReportSchema" select="$exceptionReportSchema"/>
                    <ctl:with-param name="postURL" select="$getObservationPostURL"/>
                    <ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
                    <ctl:with-param name="observedProperty" select="$observationOfferingObservedProperty"/>	
                    <ctl:with-param name="offeringId" select="$offeringId"/>	<!-- Rocky change 2011-09-05,need gml:name URN to get observation PwD 2010-12-21 -->
                    <ctl:with-param name="offeringName" select="$offeringName"/>
                  </ctl:call-test>	
                </xsl:if>
                <xsl:if test="$run-sos-go-rirm eq 'true'"> <!-- 2010-12-30 PwD -->			
                  <ctl:message select="'********************************************************'"/>
                  <ctl:message select="''"/>						
                  <ctl:call-test name="getObservation:core-SOS.GetObservation-RequestInvalidResultModel.1">
                    <ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
                    <ctl:with-param name="exceptionReportSchema" select="$exceptionReportSchema"/>
                    <ctl:with-param name="postURL" select="$getObservationPostURL"/>
                    <ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
                    <ctl:with-param name="responseFormat" select="$observationOfferingResponseFormat"/>					
                    <ctl:with-param name="observedProperty" select="$observationOfferingObservedProperty"/>	
                    <ctl:with-param name="offeringId" select="$offeringId"/>	<!-- Rocky change 2011-09-05,need gml:name URN to get observation PwD 2010-12-21 -->
                    <ctl:with-param name="offeringName" select="$offeringName"/>
                  </ctl:call-test>					
                </xsl:if>
                <xsl:if test="$run-sos-go-rirm2 eq 'true'"> <!-- 2010-12-30 PwD -->			
                  <ctl:message select="'********************************************************'"/>
                  <ctl:message select="''"/>						
                  <ctl:call-test name="getObservation:core-SOS.GetObservation-RequestInvalidResponseMode.1">
                    <ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
                    <ctl:with-param name="exceptionReportSchema" select="$exceptionReportSchema"/>
                    <ctl:with-param name="postURL" select="$getObservationPostURL"/>
                    <ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
                    <ctl:with-param name="responseFormat" select="$observationOfferingResponseFormat"/>					
                    <ctl:with-param name="observedProperty" select="$observationOfferingObservedProperty"/>	
                    <ctl:with-param name="offeringId" select="$offeringId"/>	<!-- Rocky change 2011-09-05,need gml:name URN to get observation PwD 2010-12-21 -->
                    <ctl:with-param name="offeringName" select="$offeringName"/>
                  </ctl:call-test>
                </xsl:if>
                <xsl:if test="$run-sos-go-rmsd eq 'true'"> <!-- 2010-12-30 PwD -->			
                  <ctl:message select="'********************************************************'"/>
                  <ctl:message select="''"/>
                  <ctl:call-test name="getObservation:core-SOS.GetObservation-ResponseMatchingSRSData.1">
                    <ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
                    <ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
                    <ctl:with-param name="postURL" select="$getObservationPostURL"/>
                    <ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
                  </ctl:call-test>
                </xsl:if>
                <xsl:if test="$run-sos-go-rmpd eq 'true'"> <!-- 2010-12-30 PwD -->			
                  <ctl:message select="'********************************************************'"/>
                  <ctl:message select="''"/>						
                  <ctl:call-test name="getObservation:core-SOS.GetObservation-ResponseMatchingProcedureData.1">
                    <ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
                    <ctl:with-param name="isInteractive" select="$isInteractive" />
                    <ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
                    <ctl:with-param name="postURL" select="$getObservationPostURL"/>
                    <ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
                  </ctl:call-test>
                </xsl:if>
                <xsl:if test="$run-sos-go-rmopd eq 'true'"> <!-- 2010-12-30 PwD -->			
                  <ctl:message select="'********************************************************'"/>
                  <ctl:message select="''"/>						
                  <ctl:call-test name="getObservation:core-SOS.GetObservation-ResponseMatchingObservedPropertyData.1">
                    <ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
                    <ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
                    <ctl:with-param name="exceptionReportSchema" select="$exceptionReportSchema"/>
                    <ctl:with-param name="postURL" select="$getObservationPostURL"/>
                    <ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
                    <ctl:with-param name="responseFormat" select="$observationOfferingResponseFormat"/>											
                  </ctl:call-test>
                </xsl:if>
                <xsl:if test="$run-sos-go-raetd eq 'true'"> <!-- 2010-12-30 PwD -->			
                  <ctl:message select="'********************************************************'"/>
                  <ctl:message select="''"/>						
                  <ctl:call-test name="getObservation:core-SOS.GetObservation-ResponseAdvertisedEventTimeData.1">
                    <ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
                    <ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>						
                    <ctl:with-param name="postURL" select="$getObservationPostURL"/>
                    <ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
                  </ctl:call-test>
                </xsl:if>
                <xsl:if test="$run-sos-go-rmetd eq 'true'"> <!-- 2010-12-30 PwD -->			
                  <ctl:message select="'********************************************************'"/>
                  <ctl:message select="''"/>						
                  <ctl:call-test name="getObservation:core-SOS.GetObservation-ResponseMatchingEventTimeData.1">
                    <ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
                    <ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>						
                    <ctl:with-param name="postURL" select="$getObservationPostURL"/>
                    <ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
                  </ctl:call-test>
                </xsl:if>
                <xsl:if test="$run-sos-go-rmfoid eq 'true'"> <!-- 2010-12-30 PwD -->			
                  <ctl:message select="'********************************************************'"/>
                  <ctl:message select="''"/>						
                  <ctl:call-test name="getObservation:core-SOS.GetObservation-ResponseMatchingFeatureOfInterestData.1">
                    <ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
                    <ctl:with-param name="isInteractive" select="$isInteractive" />
                    <ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>						
                    <ctl:with-param name="postURL" select="$getObservationPostURL"/>
                    <ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
                  </ctl:call-test>
                </xsl:if>
                <xsl:if test="$run-sos-go-rmrd eq 'true'"> <!-- 2010-12-30 PwD -->			
                  <ctl:message select="'********************************************************'"/>
                  <ctl:message select="''"/>						
                  <ctl:call-test name="getObservation:core-SOS.GetObservation-ResponseMatchingResultData.1">						
                    <ctl:with-param name="compareOperatorElement" select="$compareOperatorElement"/>
                    <ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
                    <ctl:with-param name="exceptionReportSchema" select="$exceptionReportSchema"/>
                    <ctl:with-param name="postURL" select="$getObservationPostURL"/>
                    <ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
                    <ctl:with-param name="responseFormat" select="$observationOfferingResponseFormat"/>					
                    <ctl:with-param name="observedProperty" select="$observationOfferingObservedProperty"/>	
                    <ctl:with-param name="offeringId" select="$offeringId"/>	<!-- Rocky change 2011-09-05,need gml:name URN to get observation PwD 2010-12-21 -->
                    <ctl:with-param name="offeringName" select="$offeringName"/>
                  </ctl:call-test>
                </xsl:if>
                <xsl:if test="$run-sos-go-rmrfd eq 'true'"> <!-- 2010-12-30 PwD -->			
                  <ctl:message select="'********************************************************'"/>
                  <ctl:message select="''"/>						
                  <ctl:call-test name="getObservation:core-SOS.GetObservation-ResponseMatchingResponseFormatData.1">
                    <ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
                    <ctl:with-param name="isInteractive" select="isInteractive" />
                    <ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
                    <ctl:with-param name="postURL" select="$getObservationPostURL"/>
                    <ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
                  </ctl:call-test>
                </xsl:if>		

              </xsl:otherwise>					
            </xsl:choose>		

            <!--					omitting this test					
							<ctl:message select="'********************************************************'"/>
							<ctl:message select="''"/>						
							<ctl:call-test name="getObservation:core-SOS.GetObservation-ResponseMatchingResultModel.1">
								<ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
								<ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
								<ctl:with-param name="postURL" select="$getObservationPostURL"/>
								<ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
							</ctl:call-test>
		-->

            <!--					omitting this test
							<ctl:message select="'********************************************************'"/>
							<ctl:message select="''"/>						
							<ctl:call-test name="getObservation:core-SOS.GetObservation-ResponseMatchingResponseMode.1">
								<ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
								<ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
								<ctl:with-param name="postURL" select="$getObservationPostURL"/>
								<ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
							</ctl:call-test>									
		-->		
          </xsl:if>
        </xsl:otherwise>					
      </xsl:choose>		
    </ctl:code>
  </ctl:test>
</ctl:package>