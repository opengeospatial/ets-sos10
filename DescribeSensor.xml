<?xml version="1.0" encoding="UTF-8"?>
<ctl:package 
	xmlns:describeSensor="https://cite.opengeospatial.org/sos-1.0.0/src/ctl/DescribeSensor.xml"
	xmlns:sosFunctions="https://cite.opengeospatial.org/sos-1.0.0/src/ctl/functions.xml"
	xmlns:ctl="http://www.occamlab.com/ctl" 
	xmlns:db5="http://docbook.org/ns/docbook" 
	xmlns:html="http://www.w3.org/1999/xhtml" 	
	xmlns:saxon="http://saxon.sf.net/" 
	xmlns:tep="http://teamengine.sourceforge.net/parsers" 
	xmlns:xi="http://www.w3.org/2001/XInclude" 
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:parsers="http://www.occamlab.com/te/parsers"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
	xmlns:xows="http://www.opengeospatial.net/ows"
	xmlns:ows="http://www.opengis.net/ows/1.1" 
	xmlns:gml="http://www.opengis.net/gml" 
	xmlns:sos="http://www.opengis.net/sos/1.0"	
	xmlns:xsos="http://www.opengeospatial.net/sos"
	xmlns:sensorML="http://www.opengis.net/sensorML"
	xmlns:tml="http://www.opengis.net/tml"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
>

		<ctl:test name="describeSensor:core-SOS.DescribeSensor-RequestInvalidMIMEType.1">						
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="owsVersion"/>
			<ctl:param name="postURL"/>
			<ctl:param name="describeSensorVersion"/>
			<ctl:param name="procedure"/>							
			<ctl:assertion>Supplying an invalid MIME type (not advertised in the capabilities document) or no MIME type for the outputFormat produces a valid error report message. </ctl:assertion>
			<ctl:comment>Check that supplying an invalid MIME type (not advertised in the capabilities document) or no MIME type for the outputFormat produces a valid error report message.  Pass if an invalid MIME type or no MIME type produces a valid error report; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the server handles invalid MIME types in the outputFormat parameter correctly.">ATS_URL#SOS.DescribeSensor-RequestInvalidMIMEType</ctl:link>
			<ctl:code>	
				<!--**********************  check for valid exception when outputFormat is missing from request ******************************-->
				<ctl:message select="'Making DescribeSensor request with no &quot;outputFormat&quot; parameter...'"/>	
				<xsl:variable name="noOutputFormatRequest">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$postURL"/>
						</ctl:url>
						<ctl:method>post</ctl:method>
						<ctl:body>
							<DescribeSensor 								
								service="SOS" 
								xmlns="http://www.opengis.net/sos/1.0" 
							>	
								<xsl:attribute name="version">
									<xsl:value-of select="$describeSensorVersion"/>
								</xsl:attribute>							
								<procedure>
									<xsl:value-of select="$procedure"/>
								</procedure>								
							</DescribeSensor>												
						</ctl:body>
										 							
						<ctl:call-function name="sosFunctions:exceptionReportValidatingParser">												
							<ctl:with-param name="schemaRoot" select="$ogcSchemaRoot"/>
							<ctl:with-param name="version" select="$owsVersion"/>
							<ctl:with-param name="encoding" select="'ows'"/>
							<ctl:with-param name="filename" select="'owsExceptionReport.xsd'"/>									
						</ctl:call-function>			
					</ctl:request>	
				</xsl:variable>										

				<xsl:choose>
					<!-- check for valid schema or missing response-->
					<xsl:when test="not($noOutputFormatRequest/*)">
						<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
						<ctl:message select="concat('Schema file: ', sosFunctions:schemaPath($ogcSchemaRoot, $owsVersion, 'ows', 'owsExceptionReport.xsd'))"/>
						<ctl:fail/>
					</xsl:when>
					<!-- check for correct exception code -->					
					<xsl:when test="not($noOutputFormatRequest/ows:ExceptionReport/ows:Exception/@exceptionCode = 'MissingParameterValue')">
						<ctl:message>Invalid exception code.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Exception code is: ', $noOutputFormatRequest/ows:ExceptionReport/ows:Exception/@exceptionCode)"/>
						</ctl:message>
						<ctl:message>Exception code should be: 'MissingParameterValue'.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<!-- looks good -->
					<xsl:otherwise>
						<ctl:message>OK</ctl:message>
					</xsl:otherwise>
				</xsl:choose>	

				<!--************************************  check for valid exception when outputFormat is invalid ******************************************-->				
				<xsl:variable name="invalidOutputFormat" select="'text/xml;subtype=&quot;sensorML/A.B.C&quot;'"/>
				<ctl:message select="concat('Making DescribeSensor request with an &quot;outputFormat&quot; parameter value that is not advertised in the capabilities document: ', $invalidOutputFormat, '...')"/>									
				<xsl:variable name="invalidOutputFormatRequest">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$postURL"/>
						</ctl:url>
						<ctl:method>post</ctl:method>
						<ctl:body>
							<DescribeSensor 
								service="SOS" 
								xmlns="http://www.opengis.net/sos/1.0"								
								>
								<xsl:attribute name="version">
									<xsl:value-of select="$describeSensorVersion"/>
								</xsl:attribute>															
								<xsl:attribute name="outputFormat">
									<xsl:value-of select="$invalidOutputFormat"/>
								</xsl:attribute>														
								<procedure>
									<xsl:value-of select="$procedure"/>
								</procedure>								
							</DescribeSensor>
							
							<!--  outputFormat="text/xml;subtype=&quot;sensorML/1.0.0&quot;" -->
						</ctl:body>
						<ctl:call-function name="sosFunctions:exceptionReportValidatingParser">												
							<ctl:with-param name="schemaRoot" select="$ogcSchemaRoot"/>
							<ctl:with-param name="version" select="$owsVersion"/>
							<ctl:with-param name="encoding" select="'ows'"/>
							<ctl:with-param name="filename" select="'owsExceptionReport.xsd'"/>									
						</ctl:call-function>						
					</ctl:request>							 														
				</xsl:variable>		
		
				<xsl:choose>
					<!-- check for valid schema or missing response-->
					<xsl:when test="not($invalidOutputFormatRequest/*)">							
						<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
						<ctl:message select="concat('Schema file: ', sosFunctions:schemaPath($ogcSchemaRoot, $owsVersion, 'ows', 'owsExceptionReport.xsd'))"/>
						<ctl:fail/>
					</xsl:when>

					<!-- check for correct exception code -->					
					<xsl:when test="not($invalidOutputFormatRequest/ows:ExceptionReport/ows:Exception/@exceptionCode = 'InvalidParameterValue')">						
						<ctl:message>Invalid exception code.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Exception code is: ', $invalidOutputFormatRequest/ows:ExceptionReport/ows:Exception/@exceptionCode)"/>
						</ctl:message>
						<ctl:message>Exception code should be: 'InvalidParameterValue'.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<!-- looks good -->
					<xsl:otherwise>
						<ctl:message>OK</ctl:message>
					</xsl:otherwise>
				</xsl:choose>					
			</ctl:code>
		</ctl:test>
		
<!--*****************************************************************************************************************************************************************************-->		

		
		<ctl:test name="describeSensor:core-SOS.DescribeSensor-RequestInvalidProcedure.1">			
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="owsVersion"/>
			<ctl:param name="postURL"/>
			<ctl:param name="describeSensorVersion"/>
			<ctl:param name="outputFormat" />
			<ctl:assertion>Supplying an invalid procedure (not advertised in the capabilities document) or no procedure for the procedure produces a valid error report message.</ctl:assertion>
			<ctl:comment>Check that supplying an invalid Procedure (not advertised in the capabilities document) or no Procedure for the Procedure produces a valid error report message.  Pass if an invalid Procedure or no Procedure produces a valid error report message; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the server handles an invalid procedure in the request correctly.">ATS_URL#SOS.DescribeSensor-RequestInvalidProcedure</ctl:link>
			<ctl:code>	
				<!--************************************  check for valid exception when procedure is missing from request ******************************************-->				
				<ctl:message select="'Making DescribeSensor request with no &quot;procedure&quot; parameter...'"/>					
				<xsl:variable name="noProcedureRequest">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$postURL"/>
						</ctl:url>
						<ctl:method>post</ctl:method>

						<ctl:body>
							<DescribeSensor 								
								service="SOS" 
								xmlns="http://www.opengis.net/sos/1.0" 
							>									
								<xsl:attribute name="version">
									<xsl:value-of select="$describeSensorVersion"/>
								</xsl:attribute>															
								<xsl:attribute name="outputFormat">
									<xsl:value-of select="$outputFormat"/>
								</xsl:attribute>																					
							</DescribeSensor>														
						</ctl:body>
											 							
						<ctl:call-function name="sosFunctions:exceptionReportValidatingParser">												
							<ctl:with-param name="schemaRoot" select="$ogcSchemaRoot"/>
							<ctl:with-param name="version" select="$owsVersion"/>
							<ctl:with-param name="encoding" select="'ows'"/>
							<ctl:with-param name="filename" select="'owsExceptionReport.xsd'"/>									
						</ctl:call-function>					
					</ctl:request>	
				</xsl:variable>										

				<xsl:choose>
					<!-- check for valid schema or missing response-->
					<xsl:when test="not($noProcedureRequest/*)">
						<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
						<ctl:message select="concat('Schema file: ', sosFunctions:schemaPath($ogcSchemaRoot, $owsVersion, 'ows', 'owsExceptionReport.xsd'))"/>
						<ctl:fail/>
					</xsl:when>
					<!-- check for correct exception code -->					
					<xsl:when test="not($noProcedureRequest/ows:ExceptionReport/ows:Exception/@exceptionCode = 'MissingParameterValue')">
						<ctl:message>Invalid exception code.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Exception code is: ', $noProcedureRequest/ows:ExceptionReport/ows:Exception/@exceptionCode)"/>
						</ctl:message>
						<ctl:message>Exception code should be: 'MissingParameterValue'.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<!-- looks good -->
					<xsl:otherwise>
						<ctl:message>OK</ctl:message>
					</xsl:otherwise>
				</xsl:choose>	

				<!--************************************  check for valid exception when procedure is invalid ******************************************-->
				<xsl:variable name="invalidProcedure" select="'urn:ogc:object:procedure:CITE:NFL:AstroDome'"/>				
				<ctl:message select="concat('Making DescribeSensor request with a procedure not advertised in the capabilities document: ', $invalidProcedure)"/>		
				<xsl:variable name="invalidProcedureRequest">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$postURL"/>
						</ctl:url>
						<ctl:method>post</ctl:method>

						<ctl:body>
							<DescribeSensor 								
								service="SOS" 
								xmlns="http://www.opengis.net/sos/1.0" 								
								xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
								>
								<xsl:attribute name="version">
									<xsl:value-of select="$describeSensorVersion"/>
								</xsl:attribute>															
								<xsl:attribute name="outputFormat">
									<xsl:value-of select="$outputFormat"/>
								</xsl:attribute>																													
								<procedure>
									<xsl:value-of select="$invalidProcedure"/>
								</procedure>								

							</DescribeSensor>							
						</ctl:body>												 							
						<ctl:call-function name="sosFunctions:exceptionReportValidatingParser">												
							<ctl:with-param name="schemaRoot" select="$ogcSchemaRoot"/>
							<ctl:with-param name="version" select="$owsVersion"/>
							<ctl:with-param name="encoding" select="'ows'"/>
							<ctl:with-param name="filename" select="'owsExceptionReport.xsd'"/>									
						</ctl:call-function>
					</ctl:request>	
				</xsl:variable>										
				
				<xsl:choose>
					<!-- check for valid schema or missing response-->
					<xsl:when test="not($invalidProcedureRequest/*)">
						<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
						<ctl:message select="concat('Schema file: ', sosFunctions:schemaPath($ogcSchemaRoot, $owsVersion, 'ows', 'owsExceptionReport.xsd'))"/>
						<ctl:fail/>
					</xsl:when>
					<!-- check for correct exception code -->					
					<xsl:when test="not($invalidProcedureRequest/ows:ExceptionReport/ows:Exception/@exceptionCode = 'InvalidParameterValue')">
						<ctl:message>Invalid exception code.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Exception code is: ', $invalidProcedureRequest/ows:ExceptionReport/ows:Exception/@exceptionCode)"/>
						</ctl:message>
						<ctl:message>Exception code should be: 'InvalidParameterValue'.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<!-- looks good -->
					<xsl:otherwise>
						<ctl:message>OK</ctl:message>
					</xsl:otherwise>
				</xsl:choose>					

			</ctl:code>
		</ctl:test>
		
		<!--*****************************************************************************************************************************************************************************-->		
		
		<ctl:test name="describeSensor:core-SOS.DescribeSensor-ResponseMatchingResponseFormat.1">			
			<ctl:param name="response"/>
			<ctl:param name="outputFormat"/>	
			<ctl:param name="procedure"/>
			<ctl:assertion>The format of the response document matches the outputFormat specified in the request and is valid according to the outputFormat schema.</ctl:assertion>
			<ctl:comment>Check that the format of the response document matches the outputFormat specified in the request and is valid according to the outputFormat schema.  Pass if assertion holds; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the format of the returned document matches the requested outputFormat (i.e. SensorML, OM, etc.)">ATS_URL#SOS.DescribeSensor-ResponseMatchingResponseFormat</ctl:link>
			<ctl:code>			
				<xsl:choose>
					<!-- check for valid schema or missing response-->
					<xsl:when test="not($response)">
						<ctl:message select="concat('The DescribeSensor response for ', $procedure, ' was invalid according to the  ', $outputFormat, ' schema.')"/>						
						<ctl:fail/>
					</xsl:when>
					<!-- looks good -->
					<xsl:otherwise>
						<ctl:message>OK</ctl:message>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
		
		<ctl:test name="describeSensor:core-SOS.DescribeSensor-ResponseMatchingProcedure.1">
			<ctl:param name="response"/>
			<ctl:param name="procedure"/>
			<ctl:assertion>The unique identifier in the response document matches the procedure specified in the request.</ctl:assertion>
			<ctl:comment>Check that the unique identifier in the response document matches the Procedure specified in the request.  Pass if assertion holds; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the unique identifier for the sensor in the returned document matches the Procedure in the request">ATS_URL#SOS.DescribeSensor-ResponseMatchingProcedure</ctl:link>
			<ctl:code>				
				<xsl:variable name="responseId" select="string($response//sensorML:System/@id | $response//sensorML:Senor/@id | $response//tml:system/@uid  | $response//tml:transducer/@uid)"/>
				<xsl:choose>
					<xsl:when test="$responseId = $procedure">
						<ctl:message>OK</ctl:message>
					</xsl:when>
					<xsl:otherwise>
						<ctl:message select="'Procedure and id do not match.'"/>
						<ctl:message select="concat('Id from response: ',$responseId)"/>
						<ctl:message select="concat('Specified procedure: ',$procedure)"/>
						<ctl:fail/>
					</xsl:otherwise>
				</xsl:choose>
			</ctl:code>
		</ctl:test>
</ctl:package>