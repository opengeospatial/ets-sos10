<?xml version="1.0" encoding="UTF-8"?>
<ctl:package 
	xmlns:sosFunctions="https://cite.opengeospatial.org/sos-1.0.0/src/ctl/functions.xml"
	xmlns:getCapabilities="https://cite.opengeospatial.org/sos-1.0.0/src/ctl/GetCapabilities.xml"
	xmlns:describeSensor="https://cite.opengeospatial.org/sos-1.0.0/src/ctl/DescribeSensor.xml"
	xmlns:getObservation="https://cite.opengeospatial.org/sos-1.0.0/src/ctl/GetObservation.xml"
	xmlns:ctl="http://www.occamlab.com/ctl" 
	xmlns:db5="http://docbook.org/ns/docbook" 
	xmlns:html="http://www.w3.org/1999/xhtml" 	
	xmlns:saxon="http://saxon.sf.net/" 
	xmlns:tep="http://teamengine.sourceforge.net/parsers" 
	xmlns:xi="http://www.w3.org/2001/XInclude" 
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:parsers="http://www.occamlab.com/te/parsers"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
	xmlns:xows="http://www.opengeospatial.net/ows"
	xmlns:ows="http://www.opengis.net/ows/1.1" 
	xmlns:gml="http://www.opengis.net/gml" 
	xmlns:sos="http://www.opengis.net/sos/1.0"	
	xmlns:xsos="http://www.opengeospatial.net/sos"
	xmlns:sensorML="http://www.opengis.net/sensorML"
	xmlns:tml="http://www.opengis.net/tml"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
	xmlns:ogc="http://www.opengis.net/ogc"
	xmlns:om="http://www.opengis.net/om/1.0" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
>

	<ctl:suite name="sos:suite">		<!--NOTE: Don't forget to update the TARGET_NAMESPACE_URI and ATS_URL placeholder values-->

		<ctl:title>Annex A - Abstract Test Suite for the Sensor Observation Service</ctl:title>
		<ctl:starting-test>sos:Main</ctl:starting-test>
	</ctl:suite>
	<ctl:test name="sos:Main">
		<ctl:assertion>The IUT satisfies all applicable assertions.</ctl:assertion>
		<ctl:code>
		         
			<xsl:variable name="form-values">
				<ctl:form height="640" width="800">
					<body>
						<h2>Compliance test suite for Sensor Observation Service (SOS) 1.0</h2>
						<h3>Service metadata</h3>
						<p>
						Please provide a URL from which a capabilities document can 
						be retrieved. Modify the URL template below to specify the 
						location of an OGC SOS implementation 
						under test.
						</p>
						<blockquote>
							<table border="1" padding="4" bgcolor="#00ffff">
								<tr>
								<td align="left">Service URL:</td>                        
								<td align="center">
									<input name="service-url" size="128" 
									type="text" 
									value="http://hostname:port/path"/>
									<select name="service-url-ddl">
										<option value="http://mars.uni-muenster.de:8080/OWS5SOS/sos">http://mars.uni-muenster.de:8080/OWS5SOS/sos</option>							  
										<option value="http://mars.uni-muenster.de:8080/52nSOSv2/sos">http://mars.uni-muenster.de:8080/52nSOSv2/sos</option>							  
										<option value="http://10.2.111.55:8080/52n/sos">http://10.2.111.55:8080/52n/sos</option>
										<option value="http://vast.uah.edu:8080/ows-dev/dopplerSos">http://vast.uah.edu:8080/ows-dev/dopplerSos</option>
									</select>
								</td>
								</tr>
								<tr><td>	
								Schema URL:
								</td>
								<td>
									<select name="schema-location-ddl">																
										<option value="C:/schemas/">C:/schemas/</option>
										<option value="http://mars.uni-muenster.de/swerep1.0/swe/trunk/sos/0.0.0/">http://mars.uni-muenster.de/swerep1.0/swe/trunk/sos/</option>			
										<option value="http://mars.uni-muenster.de/swerep/trunk/ows/">http://mars.uni-muenster.de/swerep/trunk/ows/</option>
										<option value="https://svn.opengeospatial.org/ogc-projects/ows/swe/trunk/sos/">https://svn.opengeospatial.org/ogc-projects/ows/swe/trunk/sos/1.0.0/</option>															
									</select>
								</td></tr>						
							</table>
						</blockquote>
						<input type="submit" value="Start"/>
					</body>
				</ctl:form>
			</xsl:variable>
		 
		 
			<!-- Get user input: -->	
			<xsl:variable name="sos.service.url" select="$form-values/values/value[@key='service-url-ddl']"/>
			<xsl:variable name="sos.schema.root" select="$form-values/values/value[@key='schema-location-ddl']"/>
		
        
			<!-- set other "global" variables -->
			<!-- <xsl:variable name="ows.schema.url" select="'http://mars.uni-muenster.de/swerep/trunk/ows/1.0.0/'"/> -->
				
			<xsl:variable name="ogc.schema.root" select="'http://schemas.opengis.net/'"/>
			<xsl:variable name="sos.version" select="'1.0.0'"/>		
			<xsl:variable name="ows.version" select="'1.1.0'"/>
												 
			<ctl:message select="concat('SOS service URL: ',$sos.service.url)"/>		


			<!--
			<ctl:call-test name="sos:ows-main">
				<ctl:with-param name="serviceURL" select="$sos.service.url" />
			</ctl:call-test>
			-->
			
			<ctl:call-test name="sos:core-main">
				<ctl:with-param name="serviceURL" select="$sos.service.url" />
				<ctl:with-param name="ogcSchemaRoot" select="$ogc.schema.root" />
				<ctl:with-param name="owsVersion" select="$ows.version" />
				<ctl:with-param name="sosSchemaRoot" select="$sos.schema.root" />			
				<ctl:with-param name="sosVersion" select="$sos.version"/>			
			</ctl:call-test>
	

		</ctl:code>
	</ctl:test>
	<ctl:package>
		<ctl:test name="sos:ows-main">
			<ctl:param name="serviceURL"/>
			<ctl:assertion>All assertions for "ows" conformance are satisfied.</ctl:assertion>
			<ctl:comment>Test driver for the ows module.</ctl:comment>
			<ctl:link title="1. OWS">ATS_URL#ows</ctl:link>
			<ctl:code>							
				<ctl:call-test name="sos:ows-OWS.ClientError.1">
					<ctl:with-param name="serviceURL" select="$serviceURL"/>
				</ctl:call-test>
				<ctl:call-test name="sos:ows-OWS.ContentType.1">
					<ctl:with-param name="serviceURL" select="$serviceURL"/>
				</ctl:call-test>
				<ctl:call-test name="sos:ows-OWS.CaseInsensitiveKvpNames.1">
					<ctl:with-param name="serviceURL" select="$serviceURL"/>
				</ctl:call-test>
				<ctl:call-test name="sos:ows-OWS.GetCapabilities.1">
					<ctl:with-param name="serviceURL" select="$serviceURL"/>
				</ctl:call-test>
				<ctl:call-test name="sos:ows-OWS.GetCapabilities-Exceptions.1">
					<ctl:with-param name="serviceURL" select="$serviceURL"/>
				</ctl:call-test>
				<ctl:call-test name="sos:ows-OWS.GetCapabilities-AcceptVersions.1">
					<ctl:with-param name="serviceURL" select="$serviceURL"/>
				</ctl:call-test>
				<ctl:call-test name="sos:ows-OWS.GetCapabilities-Sections.1">
					<ctl:with-param name="serviceURL" select="$serviceURL"/>
				</ctl:call-test>
				<ctl:call-test name="sos:ows-OWS.GetCapabilities-AcceptFormats.1">
					<ctl:with-param name="serviceURL" select="$serviceURL"/>
				</ctl:call-test>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sos:ows-OWS.ClientError.1">
			<ctl:param name="serviceURL"/>
			<ctl:assertion>All of the following assertions must hold for the response to an invalid request:
1) The response entity is a valid exception report having &gt;ows:ExceptionReport&lt; as the document element;
2) The value of the exceptionCode attribute specifies the appropriate code value.
</ctl:assertion>
			<ctl:comment>The following tests in the "core" section below exhaustively test for valid exception reports under 15 different circumstances.
			They will fulfill the requirements for this test.
			SOS.GetCapabilities-KVPRequestParameterHandling
SOS.GetCapabilities-KVPRequestServiceParameterHandling
SOS.GetCapabilities-KVPRequestRequestParameterHandling
SOS.DescribeSensor-RequestInvalidMIMEType
SOS.DescribeSensor-RequestInvalidProcedure
SOS.GetObservation-RequestInvalidSRSName
SOS.GetObservation-RequestInvalidOffering
SOS.GetObservation-Request Invalid EventTime
SOS.GetObservation-RequestInvalidProcedure
SOS.GetObservation-Request Invalid Observed Property
SOS.GetObservation-RequestInvalidFeatureOfInterest
SOS.GetObservation-RequestInvalidResult
SOS.GetObservation-RequestInvalidResponseFormat
SOS.GetObservation-RequestInvalidResultModel
SOS.GetObservation-RequestInvalidResponseMode
</ctl:comment>
			<ctl:link title="Client error">ATS_URL#OWS.ClientError</ctl:link>
			<ctl:code>				<!--PUT TEST CODE HERE-->

			</ctl:code>
		</ctl:test>
		<ctl:test name="sos:ows-OWS.ContentType.1">
			<ctl:param name="serviceURL"/>
			<ctl:assertion>Test purpose</ctl:assertion>
			<ctl:comment>Test method</ctl:comment>
			<ctl:link title="Content-Type response header">ATS_URL#OWS.ContentType</ctl:link>
			<ctl:code>				<!--PUT TEST CODE HERE-->

			</ctl:code>
		</ctl:test>
		<ctl:test name="sos:ows-OWS.CaseInsensitiveKvpNames.1">
			<ctl:param name="serviceURL"/>
			<ctl:assertion>Test purpose</ctl:assertion>
			<ctl:comment>Test method</ctl:comment>
			<ctl:link title="KVP parameter names">ATS_URL#OWS.CaseInsensitiveKvpNames</ctl:link>
			<ctl:code>				<!--PUT TEST CODE HERE-->

			</ctl:code>
		</ctl:test>
		<ctl:test name="sos:ows-OWS.GetCapabilities.1">
			<ctl:param name="serviceURL"/>
			<ctl:assertion>Test purpose</ctl:assertion>
			<ctl:comment>Test method</ctl:comment>
			<ctl:link title="GetCapabilities request">ATS_URL#OWS.GetCapabilities</ctl:link>
			<ctl:code>				<!--PUT TEST CODE HERE-->

			</ctl:code>
		</ctl:test>
		<ctl:test name="sos:ows-OWS.GetCapabilities-Exceptions.1">
			<ctl:param name="serviceURL"/>
			<ctl:assertion>Test purpose</ctl:assertion>
			<ctl:comment>Test method</ctl:comment>
			<ctl:link title="GetCapabilities - Exceptions">ATS_URL#OWS.GetCapabilities-Exceptions</ctl:link>
			<ctl:code>				<!--PUT TEST CODE HERE-->

			</ctl:code>
		</ctl:test>
		<ctl:test name="sos:ows-OWS.GetCapabilities-AcceptVersions.1">
			<ctl:param name="serviceURL"/>
			<ctl:assertion>Test purpose</ctl:assertion>
			<ctl:comment>Test method</ctl:comment>
			<ctl:link title="GetCapabilities - AcceptVersions parameter">ATS_URL#OWS.GetCapabilities-AcceptVersions</ctl:link>
			<ctl:code>				<!--PUT TEST CODE HERE-->

			</ctl:code>
		</ctl:test>
		<ctl:test name="sos:ows-OWS.GetCapabilities-Sections.1">
			<ctl:param name="serviceURL"/>
			<ctl:assertion>Test purpose</ctl:assertion>
			<ctl:comment>Test method</ctl:comment>
			<ctl:link title="GetCapabilities - Sections parameter">ATS_URL#OWS.GetCapabilities-Sections</ctl:link>
			<ctl:code>				<!--PUT TEST CODE HERE-->

			</ctl:code>
		</ctl:test>
		<ctl:test name="sos:ows-OWS.GetCapabilities-AcceptFormats.1">
			<ctl:param name="serviceURL"/>
			<ctl:assertion>Test purpose</ctl:assertion>
			<ctl:comment>Test method</ctl:comment>
			<ctl:link title="GetCapabilities - AcceptFormats parameter">ATS_URL#OWS.GetCapabilities-AcceptFormats</ctl:link>
			<ctl:code>				<!--PUT TEST CODE HERE-->

			</ctl:code>
		</ctl:test>
	</ctl:package>
	<ctl:package>
		<ctl:test name="sos:general-main">
			<ctl:param name="serviceURL"/>
			<ctl:assertion>All assertions for "general" conformance are satisfied.</ctl:assertion>
			<ctl:comment>Test driver for the general module.</ctl:comment>
			<ctl:link title="2. General">ATS_URL#general</ctl:link>
			<ctl:code>
				<ctl:call-test name="sos:general-SOS.General-InvalidRequest.1">
					<ctl:with-param name="serviceURL" select="$serviceURL"/>
				</ctl:call-test>
				<ctl:call-test name="sos:general-SOS.General-ValidResponse.1">
					<ctl:with-param name="serviceURL" select="$serviceURL"/>
				</ctl:call-test>
			</ctl:code>
		</ctl:test>
		<ctl:test name="sos:general-SOS.General-InvalidRequest.1">
			<ctl:param name="serviceURL"/>
			<ctl:assertion>Test purpose</ctl:assertion>
			<ctl:comment>Test method</ctl:comment>
			<ctl:link title="Verify that an invalid request produces an appropriate response from the server.">ATS_URL#SOS.General-InvalidRequest</ctl:link>
			<ctl:code>				<!--PUT TEST CODE HERE-->

			</ctl:code>
		</ctl:test>
		<ctl:test name="sos:general-SOS.General-ValidResponse.1">
			<ctl:param name="serviceURL"/>
			<ctl:assertion>Test purpose</ctl:assertion>
			<ctl:comment>Test method</ctl:comment>
			<ctl:link title="Verify that a response entity is schema-valid">ATS_URL#SOS.General-ValidResponse</ctl:link>
			<ctl:code>				<!--PUT TEST CODE HERE-->

			</ctl:code>
		</ctl:test>
	</ctl:package>
	<ctl:package>
		<ctl:test name="sos:core-main">
			<ctl:param name="serviceURL"/>
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="owsVersion"/>
			<ctl:param name="sosSchemaRoot"/>
			<ctl:param name="sosVersion"/>

			
			<ctl:assertion>All assertions for "core" conformance are satisfied.</ctl:assertion>
			<ctl:comment>Test driver for the core module.</ctl:comment>
			<ctl:link title="3. Core">ATS_URL#core</ctl:link>
			<ctl:code>			
				<ctl:message select="'--------------------------------------------------------'"/>
				<ctl:message select="''"/>
				<ctl:call-test name="getCapabilities:core-SOS.GetCapabilities-KVPRequestParameterHandling.1">
					<ctl:with-param name="serviceURL" select="$serviceURL"/>
					<ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
					<ctl:with-param name="owsVersion" select="$owsVersion"/>
				</ctl:call-test>
 				
				<ctl:message select="'--------------------------------------------------------'"/>
				<ctl:message select="''"/>
				<ctl:call-test name="getCapabilities:core-SOS.GetCapabilities-KVPRequestServiceParameterHandling.1">
					<ctl:with-param name="serviceURL" select="$serviceURL"/>
					<ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
					<ctl:with-param name="owsVersion" select="$owsVersion"/>
				</ctl:call-test>
				
				<ctl:message select="'--------------------------------------------------------'"/>
				<ctl:message select="''"/>		
				<ctl:call-test name="getCapabilities:core-SOS.GetCapabilities-KVPRequestRequestParameterHandling.1">
					<ctl:with-param name="serviceURL" select="$serviceURL"/>
					<ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
					<ctl:with-param name="owsVersion" select="$owsVersion"/>
				</ctl:call-test>
												
				<!--xsl:variable name="getCapabilitiesRequest">
					<xsl:value-of select="sosFunctions:getCapabilitiesRequest($serviceURL,$sosSchemaRoot)"/>
				</xsl:variable-->					
				<ctl:message select="'--------------------------------------------------------'"/>
				<ctl:message select="''"/>				
				<ctl:message select="'A request for a valid capabilities document will now be made.'"/>
				<ctl:message select="'If this response passes schema validation, further tests will be performed on the GetCapabilities response.'"/>
				<ctl:message select="'If it fails schema validation, testing will stop.'"/>
				<ctl:message select="'Validating...'"/>
				<xsl:variable name="getCapabilitiesRequest">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$serviceURL"/>							
						</ctl:url>
						<ctl:method>get</ctl:method>						
						<ctl:param name="request">GetCapabilities</ctl:param>
						<ctl:param name="service">SOS</ctl:param> 
						<ctl:param name="version">1.0</ctl:param>
						<!--
						<ctl:call-function name="sosFunctions:xmlValidatingParser">					
							<ctl:with-param name="schemaRoot" select="$sosSchemaRoot"/>
							<ctl:with-param name="version" select="$sosVersion"/>
							<ctl:with-param name="encoding" select="'sos'"/>
							<ctl:with-param name="filename" select="'sosGetCapabilities.xsd'"/>								
						</ctl:call-function>
						-->
					</ctl:request>
				</xsl:variable>
				<!--ctl:message>
				Scoob
					<xsl:value-of select="$getCapabilitiesRequest/*"/>
				</ctl:message-->
								
				<xsl:choose>
					<!-- check for valid schema or missing response-->
					<xsl:when test="not($getCapabilitiesRequest/*)">
						<ctl:message>GetCapabilites response document failed schema validation.</ctl:message>
						<ctl:message><xsl:value-of select="concat('Schema: ', sosFunctions:schemaPath($sosSchemaRoot, $sosVersion,'sos', 'sosGetCapabilities.xsd'))"/></ctl:message>
						<ctl:fail/>
					</xsl:when>

					<xsl:otherwise>
						<ctl:message select="'--------------------------------------------------------'"/>
						<ctl:message select="''"/>					
						<ctl:message>Capabilities response is valid, continuing...</ctl:message>
				
						<ctl:message select="'--------------------------------------------------------'"/>
						<ctl:message select="''"/>						
						<ctl:call-test name="getCapabilities:core-SOS.GetCapabilities-OperationsMetadataMandatoryOperations.1">
							<ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
						</ctl:call-test>
				
						<ctl:message select="'--------------------------------------------------------'"/>
						<ctl:message select="''"/>												
						<ctl:call-test name="getCapabilities:core-SOS.GetCapabilities-OperationsMetadaOptionalOperations.1">
							<ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
						</ctl:call-test>
				
						<ctl:message select="'--------------------------------------------------------'"/>
						<ctl:message select="''"/>						
						<ctl:call-test name="getCapabilities:core-SOS.GetCapabilities-ResponseContentsValidTime.1">
							<ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
						</ctl:call-test>
	
						<ctl:message select="'--------------------------------------------------------'"/>
						<ctl:message select="''"/>							
						<ctl:call-test name="getCapabilities:core-SOS.GetCapabilities-ResponseContentsValidProcedure.1">
							<ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
						</ctl:call-test>
						
						<ctl:message select="'--------------------------------------------------------'"/>
						<ctl:message select="''"/>												
						<ctl:call-test name="getCapabilities:core-SOS.GetCapabilities-ResponseContentsValidObservedProperty.1">
							<ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
						</ctl:call-test>

						<ctl:message select="'--------------------------------------------------------'"/>
						<ctl:message select="''"/>												
						<ctl:call-test name="getCapabilities:core-SOS.GetCapabilities-ResponseContentsValidResponseFormat.1">
							<ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
						</ctl:call-test>

						<ctl:message select="'--------------------------------------------------------'"/>
						<ctl:message select="''"/>												
						<ctl:call-test name="getCapabilities:core-SOS.GetCapabilities-ResponseContentsValidResultModel.1">
							<ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
						</ctl:call-test>
										
						<!--********************   Create variables for DescribeSensor **********************************-->						
						<xsl:variable name="describeSensorPostURL" select="sosFunctions:operationPostURL($getCapabilitiesRequest, 'DescribeSensor')"/>
						<xsl:variable name="describeSensorVersion" select="sosFunctions:operationVersion($getCapabilitiesRequest, 'DescribeSensor')"/>
						<xsl:variable name="describeSensorProcedure" select="sosFunctions:describeSensorFirstProcedure($getCapabilitiesRequest)"/>
						<xsl:variable name="describeSensorOutputFormat" select="sosFunctions:describeSensorOutputFormat($getCapabilitiesRequest)"/>						
<!--						
						<xsl:for-each select="$getCapabilitiesRequest//ows:Operation[@name='DescribeSensor']//ows:Parameter[@name='procedure']//ows:AllowedValues/ows:Value">
							<ctl:message select="concat('hello ', .)"/>
						</xsl:for-each>					
					
						<ctl:message select="string($describeSensorPostURL)"/>
						<ctl:message select="$describeSensorVersion"/>
						<ctl:message select="$describeSensorProcedure"/>
						<ctl:message select="$describeSensorOutputFormat"/>
-->
						
						<ctl:message select="'--------------------------------------------------------'"/>
						<ctl:message select="''"/>												
						<ctl:call-test name="describeSensor:core-SOS.DescribeSensor-RequestInvalidMIMEType.1">							
							<ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
							<ctl:with-param name="owsVersion" select="$owsVersion"/>
							<ctl:with-param name="postURL" select="$describeSensorPostURL"/>
							<ctl:with-param name="describeSensorVersion" select="$describeSensorVersion"/>
							<ctl:with-param name="procedure" select="$describeSensorProcedure"/>						
						</ctl:call-test>

						<ctl:message select="'--------------------------------------------------------'"/>
						<ctl:message select="''"/>						
						<ctl:call-test name="describeSensor:core-SOS.DescribeSensor-RequestInvalidProcedure.1">
							<ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
							<ctl:with-param name="owsVersion" select="$owsVersion"/>
							<ctl:with-param name="postURL" select="$describeSensorPostURL"/>
							<ctl:with-param name="describeSensorVersion" select="$describeSensorVersion"/>
							<ctl:with-param name="outputFormat" select="$describeSensorOutputFormat"/>
						</ctl:call-test>

						<ctl:message select="'--------------------------------------------------------'"/>
						<ctl:message select="''"/>				
						<ctl:message select="'A request for a valid DescribeSensor response will now be made for each procedure.'"/>
						<ctl:message select="'If a response passes schema validation, further tests will be performed on the DescribeSensor response for that procedure.'"/>
						<xsl:variable name="outputFormatEncoding" select="sosFunctions:mimeTypeSubtypeEncoding($describeSensorOutputFormat)"/>
						<xsl:variable name="outputFormatVersion" select="sosFunctions:mimeTypeSubtypeVersion($describeSensorOutputFormat)"/>

							
						<xsl:for-each select="$getCapabilitiesRequest//ows:Operation[@name='DescribeSensor']//ows:Parameter[@name='procedure']//ows:AllowedValues/ows:Value">
							<ctl:message select="'--------------------------------------------------------'"/>
							<ctl:message select="''"/>
							<ctl:message select="concat('Procedure: ', .)"/>
							<ctl:message select="concat('outputFormat: ', $describeSensorOutputFormat)"/>
							<ctl:message select="'Validating against the schema at'"/>				
							<ctl:message select="sosFunctions:schemaPath($ogcSchemaRoot, $outputFormatVersion, $outputFormatEncoding, concat($outputFormatEncoding, '.xsd'))"/>
							<ctl:message select="'...'"/>
							<xsl:variable name="describeSensor">
								<ctl:request>
									<ctl:url>
										<xsl:value-of select="$describeSensorPostURL"/>
									</ctl:url>
									<ctl:method>post</ctl:method>
			
									<ctl:body>
										<DescribeSensor 								
											service="SOS" 
											xmlns="http://www.opengis.net/sos/1.0" 								
											xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
										>
											<xsl:attribute name="version">
												<xsl:value-of select="$describeSensorVersion"/>
											</xsl:attribute>															
											<xsl:attribute name="outputFormat">
												<xsl:value-of select="$describeSensorOutputFormat"/>
											</xsl:attribute>																													
											<procedure>
												<xsl:value-of select="."/>
											</procedure>
		
										</DescribeSensor>
								
									</ctl:body>				
									
									<ctl:call-function name="sosFunctions:xmlValidatingParser">												
										<ctl:with-param name="schemaRoot" select="$ogcSchemaRoot"/>
										<ctl:with-param name="version" select="$outputFormatVersion"/>
										<ctl:with-param name="encoding" select="$outputFormatEncoding"/>
										<ctl:with-param name="filename" select="concat($outputFormatEncoding, '.xsd')"/>									
									</ctl:call-function>
								
								</ctl:request>	
							</xsl:variable>							
							
							<ctl:message select="''"/>					
							<ctl:call-test name="describeSensor:core-SOS.DescribeSensor-ResponseMatchingResponseFormat.1">
								<ctl:with-param name="response" select="$describeSensor"/>
								<ctl:with-param name="outputFormat" select="$describeSensorOutputFormat"/>
								<ctl:with-param name="procedure" select="."/>
							</ctl:call-test>
				
							<xsl:if test="$describeSensor/*"> <!-- if schema validated, do the rest of the tests on DescribSensor -->
								<ctl:message select="'--------------------------------------------------------'"/>
								<ctl:message select="''"/>									
								<ctl:call-test name="describeSensor:core-SOS.DescribeSensor-ResponseMatchingProcedure.1">
									<ctl:with-param name="response" select="$describeSensor"/>
									<ctl:with-param name="procedure" select="."/>
								</ctl:call-test>
							</xsl:if>
					
						</xsl:for-each>
						<!--********************   Create variables for GetObservation **********************************-->	
						
						<xsl:variable name="getObservationPostURL" select="sosFunctions:operationPostURL($getCapabilitiesRequest, 'DescribeSensor')"/>
						<xsl:variable name="getObservationVersion" select="sosFunctions:operationVersion($getCapabilitiesRequest, 'DescribeSensor')"/>
						<xsl:variable name="offeringId"	select="sosFunctions:capabilitiesFirstOfferingId($getCapabilitiesRequest)"/>
						<xsl:variable name="observationOfferingResponseFormat" select="sosFunctions:observationOfferingResponseFormat($getCapabilitiesRequest, $offeringId)"/>
						<xsl:variable name="observationOfferingObservedProperty" select="sosFunctions:observationOfferingObservedProperty($getCapabilitiesRequest, $offeringId)"/>						
	<!--					
						<ctl:message select="$getObservationPostURL"/>
						<ctl:message select="$offeringId"/>
						<ctl:message select="$getObservationVersion"/>
						<ctl:message select="$observationOfferingResponseFormat"/>
						<ctl:message select="$observationOfferingObservedProperty"/>
	-->					
						<ctl:message select="'--------------------------------------------------------'"/>
						<ctl:message select="''"/>									
						<ctl:call-test name="getObservation:core-SOS.GetObservation-RequestInvalidSRSName.1">
							<ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
							<ctl:with-param name="owsVersion" select="$owsVersion"/>
							<ctl:with-param name="postURL" select="$getObservationPostURL"/>
							<ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
							<ctl:with-param name="responseFormat" select="$observationOfferingResponseFormat"/>					
							<ctl:with-param name="observedProperty" select="$observationOfferingObservedProperty"/>	
							<ctl:with-param name="offeringId" select="$offeringId"/>	
						</ctl:call-test>
						<ctl:message select="'--------------------------------------------------------'"/>
						<ctl:message select="''"/>															
						<ctl:call-test name="getObservation:core-SOS.GetObservation-RequestInvalidOffering.1">
							<ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
							<ctl:with-param name="owsVersion" select="$owsVersion"/>
							<ctl:with-param name="postURL" select="$getObservationPostURL"/>
							<ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
							<ctl:with-param name="responseFormat" select="$observationOfferingResponseFormat"/>					
							<ctl:with-param name="observedProperty" select="$observationOfferingObservedProperty"/>
						</ctl:call-test>
						
						<ctl:message select="'--------------------------------------------------------'"/>
						<ctl:message select="''"/>																					
						<ctl:call-test name="getObservation:core-SOS.GetObservation-RequestInvalidEventTime.1">
							<ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
							<ctl:with-param name="owsVersion" select="$owsVersion"/>
							<ctl:with-param name="postURL" select="$getObservationPostURL"/>
							<ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
							<ctl:with-param name="responseFormat" select="$observationOfferingResponseFormat"/>					
							<ctl:with-param name="observedProperty" select="$observationOfferingObservedProperty"/>	
							<ctl:with-param name="offeringId" select="$offeringId"/>
						</ctl:call-test>	
	
						<ctl:message select="'--------------------------------------------------------'"/>
						<ctl:message select="''"/>																					
						<ctl:call-test name="getObservation:core-SOS.GetObservation-RequestInvalidProcedure.1">						
						<ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
						<ctl:with-param name="owsVersion" select="$owsVersion"/>
						<ctl:with-param name="postURL" select="$getObservationPostURL"/>
						<ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
						<ctl:with-param name="responseFormat" select="$observationOfferingResponseFormat"/>					
						<ctl:with-param name="observedProperty" select="$observationOfferingObservedProperty"/>	
						<ctl:with-param name="offeringId" select="$offeringId"/>
					</ctl:call-test>

					<ctl:message select="'--------------------------------------------------------'"/>
					<ctl:message select="''"/>																					
					<ctl:call-test name="getObservation:core-SOS.GetObservation-RequestInvalidFeatureOfInterest.1">
						<ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
						<ctl:with-param name="owsVersion" select="$owsVersion"/>
						<ctl:with-param name="postURL" select="$getObservationPostURL"/>
						<ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
						<ctl:with-param name="responseFormat" select="$observationOfferingResponseFormat"/>					
						<ctl:with-param name="observedProperty" select="$observationOfferingObservedProperty"/>	
						<ctl:with-param name="offeringId" select="$offeringId"/>
					</ctl:call-test>

					<ctl:message select="'--------------------------------------------------------'"/>
					<ctl:message select="''"/>																					
					<ctl:call-test name="getObservation:core-SOS.GetObservation-RequestInvalidObservedProperty.1">
						<ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
						<ctl:with-param name="owsVersion" select="$owsVersion"/>
						<ctl:with-param name="postURL" select="$getObservationPostURL"/>
						<ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
						<ctl:with-param name="responseFormat" select="$observationOfferingResponseFormat"/>					
						<ctl:with-param name="observedProperty" select="$observationOfferingObservedProperty"/>	
						<ctl:with-param name="offeringId" select="$offeringId"/>
					</ctl:call-test>	

					<ctl:message select="'--------------------------------------------------------'"/>
					<ctl:message select="''"/>							
					<ctl:call-test name="getObservation:core-SOS.GetObservation-RequestInvalidResult.1">
						<ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
						<ctl:with-param name="owsVersion" select="$owsVersion"/>
						<ctl:with-param name="postURL" select="$getObservationPostURL"/>
						<ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
						<ctl:with-param name="responseFormat" select="$observationOfferingResponseFormat"/>					
						<ctl:with-param name="observedProperty" select="$observationOfferingObservedProperty"/>	
						<ctl:with-param name="offeringId" select="$offeringId"/>
					</ctl:call-test>

					<ctl:message select="'--------------------------------------------------------'"/>
					<ctl:message select="''"/>						
					<ctl:call-test name="getObservation:core-SOS.GetObservation-RequestInvalidResponseFormat.1">
						<ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
						<ctl:with-param name="owsVersion" select="$owsVersion"/>
						<ctl:with-param name="postURL" select="$getObservationPostURL"/>
						<ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
						<ctl:with-param name="observedProperty" select="$observationOfferingObservedProperty"/>	
						<ctl:with-param name="offeringId" select="$offeringId"/>						
					</ctl:call-test>	

					<ctl:message select="'--------------------------------------------------------'"/>
					<ctl:message select="''"/>						
					<ctl:call-test name="getObservation:core-SOS.GetObservation-RequestInvalidResultModel.1">
						<ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
						<ctl:with-param name="owsVersion" select="$owsVersion"/>
						<ctl:with-param name="postURL" select="$getObservationPostURL"/>
						<ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
						<ctl:with-param name="responseFormat" select="$observationOfferingResponseFormat"/>					
						<ctl:with-param name="observedProperty" select="$observationOfferingObservedProperty"/>	
						<ctl:with-param name="offeringId" select="$offeringId"/>
					</ctl:call-test>					

					<ctl:call-test name="getObservation:core-SOS.GetObservation-RequestInvalidResponseMode.1">
						<ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
						<ctl:with-param name="owsVersion" select="$owsVersion"/>
						<ctl:with-param name="postURL" select="$getObservationPostURL"/>
						<ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
						<ctl:with-param name="responseFormat" select="$observationOfferingResponseFormat"/>					
						<ctl:with-param name="observedProperty" select="$observationOfferingObservedProperty"/>	
						<ctl:with-param name="offeringId" select="$offeringId"/>
					</ctl:call-test>
				
					<!-- only run this test if there are allowed values for the srsName parameter for GetObservation -->
					<!--xsl:for-each select="$getCapabilitiesRequest//ows:Operation[@name='GetObservation']//ows:Parameter[@name='srsName']//ows:AllowedValues/ows:Value"-->
					<ctl:call-test name="getObservation:core-SOS.GetObservation-ResponseMatchingSRSData.1">
						<ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
						<ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
						<ctl:with-param name="owsVersion" select="$owsVersion"/>
						<ctl:with-param name="postURL" select="$getObservationPostURL"/>
						<ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
						<ctl:with-param name="responseFormat" select="$observationOfferingResponseFormat"/>					
						<ctl:with-param name="observedProperty" select="$observationOfferingObservedProperty"/>	
						<ctl:with-param name="offeringId" select="$offeringId"/>	
						<ctl:with-param name="srsName" select="'urn:ogc:crs:epsg:4326'"/>	
					</ctl:call-test>
					<!--/xsl:for-each-->
					
					<ctl:message select="'--------------------------------------------------------'"/>
					<ctl:message select="''"/>						
					<ctl:call-test name="getObservation:core-SOS.GetObservation-ResponseMatchingProcedureData.1">
						<ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
						<ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
						<ctl:with-param name="owsVersion" select="$owsVersion"/>
						<ctl:with-param name="postURL" select="$getObservationPostURL"/>
						<ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
						<ctl:with-param name="responseFormat" select="$observationOfferingResponseFormat"/>					
						<ctl:with-param name="observedProperty" select="$observationOfferingObservedProperty"/>	
						<ctl:with-param name="offeringId" select="$offeringId"/>
					</ctl:call-test>
					
					<ctl:message select="'--------------------------------------------------------'"/>
					<ctl:message select="''"/>						
					<ctl:call-test name="getObservation:core-SOS.GetObservation-ResponseMatchingObservedPropertyData.1">
						<ctl:with-param name="capabilitiesDocument" select="$getCapabilitiesRequest"/>
						<ctl:with-param name="ogcSchemaRoot" select="$ogcSchemaRoot"/>
						<ctl:with-param name="owsVersion" select="$owsVersion"/>
						<ctl:with-param name="postURL" select="$getObservationPostURL"/>
						<ctl:with-param name="getObservationVersion" select="$getObservationVersion"/>
						<ctl:with-param name="responseFormat" select="$observationOfferingResponseFormat"/>					
						<ctl:with-param name="observedProperty" select="$observationOfferingObservedProperty"/>	
					</ctl:call-test>
					
					<ctl:message select="'--------------------------------------------------------'"/>
					<ctl:message select="''"/>						
					<ctl:call-test name="getObservation:core-SOS.GetObservation-ResponseAdvertisedEventTimeData.1">
						<ctl:with-param name="serviceURL" select="$serviceURL"/>
					</ctl:call-test>

					<ctl:message select="'--------------------------------------------------------'"/>
					<ctl:message select="''"/>						
					<ctl:call-test name="getObservation:core-SOS.GetObservation-ResponseMatchingEventTimeData.1">
						<ctl:with-param name="serviceURL" select="$serviceURL"/>
					</ctl:call-test>
					
					<ctl:message select="'--------------------------------------------------------'"/>
					<ctl:message select="''"/>						
					<ctl:call-test name="getObservation:core-SOS.GetObservation-ResponseMatchingFeatureOfInterestData.1">
						<ctl:with-param name="serviceURL" select="$serviceURL"/>
					</ctl:call-test>
					
					<ctl:message select="'--------------------------------------------------------'"/>
					<ctl:message select="''"/>						
					<ctl:call-test name="getObservation:core-SOS.GetObservation-ResponseMatchingResultData.1">
						<ctl:with-param name="serviceURL" select="$serviceURL"/>
					</ctl:call-test>
					
					<ctl:message select="'--------------------------------------------------------'"/>
					<ctl:message select="''"/>						
					<ctl:call-test name="getObservation:core-SOS.GetObservation-ResponseMatchingResponseFormatData.1">
						<ctl:with-param name="serviceURL" select="$serviceURL"/>
					</ctl:call-test>
					
					<ctl:message select="'--------------------------------------------------------'"/>
					<ctl:message select="''"/>						
					<ctl:call-test name="getObservation:core-SOS.GetObservation-ResponseMatchingResultModel.1">
						<ctl:with-param name="serviceURL" select="$serviceURL"/>
					</ctl:call-test>
					
					<ctl:message select="'--------------------------------------------------------'"/>
					<ctl:message select="''"/>						
					<ctl:call-test name="getObservation:core-SOS.GetObservation-ResponseMatchingResponseMode.1">
						<ctl:with-param name="serviceURL" select="$serviceURL"/>
					</ctl:call-test>					
					
				<!--
						<xsl:variable name="getObservation">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$getObservationPostURL"/>
								</ctl:url>
								<ctl:method>post</ctl:method>
			
								<ctl:body>								
									<GetObservation 
										xmlns="http://www.opengis.net/sos/1.0" 
										xmlns:ows="http://www.opengis.net/ows/1.1" 
										xmlns:gml="http://www.opengis.net/gml" 
										xmlns:ogc="http://www.opengis.net/ogc" 
										xmlns:om="http://www.opengis.net/om/1.0" 
										xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
										xsi:schemaLocation="http://www.opengis.net/sos/1.0
											C:\Ifgi\OGC_material\schemata_final\svn\swe\trunk\sos\1.0.0/sosGetObservation.xsd" 
										service="SOS"
									>
										<xsl:attribute name="version">
											<xsl:value-of select="$getObservationVersion"/>
										</xsl:attribute>
										<offering><xsl:value-of select="$offeringId"/></offering>
										<observedProperty>
											<xsl:value-of select="$observationOfferingObservedProperty"/>
										</observedProperty>
										<responseFormat>
											<xsl:value-of select="$observationOfferingResponseFormat"/>
										</responseFormat>	
									</GetObservation>						
								</ctl:body>		

								
								<ctl:call-function name="sosFunctions:xmlValidatingParser">												
									<ctl:with-param name="schemaRoot" select="$sosSchemaRoot"/>
									<ctl:with-param name="version" select="$sosVersion"/>
									<ctl:with-param name="encoding" select="'sos'"/>
									<ctl:with-param name="filename" select="'sosGetObservation.xsd'"/>									
								</ctl:call-function>
															
							</ctl:request>
						</xsl:variable>	
	-->
													
					</xsl:otherwise>					
				</xsl:choose>				
			</ctl:code>
		</ctl:test> 
	

	</ctl:package>
</ctl:package>