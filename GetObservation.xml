<?xml version="1.0" encoding="UTF-8"?>
<ctl:package 
	xmlns:getObservation="https://cite.opengeospatial.org/sos-1.0.0/src/ctl/GetObservation.xml"
	xmlns:sosFunctions="https://cite.opengeospatial.org/sos-1.0.0/src/ctl/functions.xml"
	xmlns:ctl="http://www.occamlab.com/ctl" 
	xmlns:db5="http://docbook.org/ns/docbook" 
	xmlns:html="http://www.w3.org/1999/xhtml" 	
	xmlns:saxon="http://saxon.sf.net/" 
	xmlns:tep="http://teamengine.sourceforge.net/parsers" 
	xmlns:xi="http://www.w3.org/2001/XInclude" 
	xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:parsers="http://www.occamlab.com/te/parsers"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
	xmlns:xows="http://www.opengeospatial.net/ows"
	xmlns:ows="http://www.opengis.net/ows/1.1" 
	xmlns:gml="http://www.opengis.net/gml" 
	xmlns:sos="http://www.opengis.net/sos/1.0"	
	xmlns:xsos="http://www.opengeospatial.net/sos"
	xmlns:sensorML="http://www.opengis.net/sensorML"
	xmlns:tml="http://www.opengis.net/tml"
	xmlns:om="http://www.opengis.net/om/1.0.0"
	xmlns:xml="http://www.w3.org/XML/1998/namespace"
>
<!--*****************************************************************************************************************************************************************************-->		
		<ctl:test name="getObservation:core-SOS.GetObservation-RequestInvalidSRSName.1">
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="owsVersion"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:param name="responseFormat"/>					
			<ctl:param name="observedProperty"/>
			<ctl:param name="offeringId"/>			
			<ctl:assertion>An invalid srsName in the request produces a valid error message.</ctl:assertion>
			<ctl:comment>Check that an invalid srsName in the request produces a valid error message.  Pass if an invalid srsName produces a valid error message; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that an invalid srsName in the request produces a valid error message.  This includes providing an empty srsName element or providing an srsName that is not advertised for the requested offering.">ATS_URL#SOS.GetObservation-RequestInvalidSRSName</ctl:link>
			<ctl:code>
				<xsl:variable name="invalidSRSName" select="'urn:ogc:crs:epsg:9999'"/>
				<ctl:message select="concat('Making GetObservation request with an &quot;srsName&quot; parameter value that is not advertised in the capabilities document: ', $invalidSRSName, '   ...')"/>									
				<xsl:variable name="getObservation">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$postURL"/>
						</ctl:url>
						<ctl:method>post</ctl:method>
							<ctl:body>								
								<GetObservation 
									xmlns="http://www.opengis.net/sos/1.0" 
									xmlns:ows="http://www.opengis.net/ows/1.1" 
									xmlns:gml="http://www.opengis.net/gml" 
									xmlns:ogc="http://www.opengis.net/ogc" 
									xmlns:om="http://www.opengis.net/om/1.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
									xsi:schemaLocation="http://www.opengis.net/sos/1.0
										C:\Ifgi\OGC_material\schemata_final\svn\swe\trunk\sos\1.0.0/sosGetObservation.xsd" 
									service="SOS"
								>
									<xsl:attribute name="version">
										<xsl:value-of select="$getObservationVersion"/>
									</xsl:attribute>
									<xsl:attribute name="srsName">
										<xsl:value-of select="$invalidSRSName"/>
									</xsl:attribute>									
									<offering><xsl:value-of select="$offeringId"/></offering>
									<observedProperty>
										<xsl:value-of select="$observedProperty"/>
									</observedProperty>
									<responseFormat>
										<xsl:value-of select="$responseFormat"/>
									</responseFormat>										
								</GetObservation>						
							</ctl:body>	
						<ctl:call-function name="sosFunctions:xmlValidatingParser">												
							<ctl:with-param name="schemaRoot" select="'C:\schemas\SCHEMAS_OPENGIS_NET\'"/>
							<ctl:with-param name="version" select="$owsVersion"/>
							<ctl:with-param name="encoding" select="'ows'"/>
							<ctl:with-param name="filename" select="'owsExceptionReport.xsd'"/>									
						</ctl:call-function>						
					</ctl:request>							 														
				</xsl:variable>		
		
				<xsl:choose>
					<!-- check for valid schema or missing response-->
					<xsl:when test="not($getObservation/*)">							
						<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
						<ctl:message select="concat('Schema file: ', sosFunctions:schemaPath('C:\schemas\SCHEMAS_OPENGIS_NET\', $owsVersion, 'ows', 'owsExceptionReport.xsd'))"/>
						<ctl:fail/>
					</xsl:when>

					<!-- check for correct exception code -->					
					<xsl:when test="not($getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode = 'InvalidParameterValue')">						
						<ctl:message>Invalid exception code.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Exception code is: ', $getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode)"/>
						</ctl:message>
						<ctl:message>Exception code should be: 'InvalidParameterValue'.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<!-- looks good -->
					<xsl:otherwise>
						<ctl:message>OK</ctl:message>
					</xsl:otherwise>
				</xsl:choose>					

			</ctl:code>
		</ctl:test>
		
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-RequestInvalidOffering.1">
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="owsVersion"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:param name="responseFormat"/>					
			<ctl:param name="observedProperty"/>
			<ctl:assertion>An invalid offering in the request produces a valid error message. </ctl:assertion>
			<ctl:comment>Check that an invalid offering in the request produces a valid error message.    Pass if an invalid offering in the request produces a valid error message; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that an invalid offering in the request produces a valid error message.  This includes specifying no offering or an offering value that is not advertised in the Capabilities document.">ATS_URL#SOS.GetObservation-RequestInvalidOffering</ctl:link>
			<ctl:code>
				<xsl:variable name="invalidOfferingId" select="'softliness_of_jello'"/>
				<ctl:message select="concat('Making GetObservation request with an &quot;offeringId&quot; parameter value that is not advertised in the capabilities document: ', $invalidOfferingId, '   ...')"/>									
				<xsl:variable name="getObservation">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$postURL"/>
						</ctl:url>
						<ctl:method>post</ctl:method>
							<ctl:body>								
								<GetObservation 
									xmlns="http://www.opengis.net/sos/1.0" 
									xmlns:ows="http://www.opengis.net/ows/1.1" 
									xmlns:gml="http://www.opengis.net/gml" 
									xmlns:ogc="http://www.opengis.net/ogc" 
									xmlns:om="http://www.opengis.net/om/1.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
									xsi:schemaLocation="http://www.opengis.net/sos/1.0
										C:\Ifgi\OGC_material\schemata_final\svn\swe\trunk\sos\1.0.0/sosGetObservation.xsd" 
									service="SOS"
								>
									<xsl:attribute name="version">
										<xsl:value-of select="$getObservationVersion"/>
									</xsl:attribute>									
									<offering><xsl:value-of select="$invalidOfferingId"/></offering>
									<observedProperty>
										<xsl:value-of select="$observedProperty"/>
									</observedProperty>
									<responseFormat>
										<xsl:value-of select="$responseFormat"/>
									</responseFormat>										
								</GetObservation>						
							</ctl:body>	
						<ctl:call-function name="sosFunctions:xmlValidatingParser">												
							<ctl:with-param name="schemaRoot" select="'C:\schemas\SCHEMAS_OPENGIS_NET\'"/>
							<ctl:with-param name="version" select="$owsVersion"/>
							<ctl:with-param name="encoding" select="'ows'"/>
							<ctl:with-param name="filename" select="'owsExceptionReport.xsd'"/>									
						</ctl:call-function>						
					</ctl:request>							 														
				</xsl:variable>		
		
				<xsl:choose>
					<!-- check for valid schema or missing response-->
					<xsl:when test="not($getObservation/*)">							
						<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
						<ctl:message select="concat('Schema file: ', sosFunctions:schemaPath('C:\schemas\SCHEMAS_OPENGIS_NET\', $owsVersion, 'ows', 'owsExceptionReport.xsd'))"/>
						<ctl:fail/>
					</xsl:when>

					<!-- check for correct exception code -->					
					<xsl:when test="not($getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode = 'InvalidParameterValue')">						
						<ctl:message>Invalid exception code.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Exception code is: ', $getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode)"/>
						</ctl:message>
						<ctl:message>Exception code should be: 'InvalidParameterValue'.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<!-- looks good -->
					<xsl:otherwise>
						<ctl:message>OK</ctl:message>
					</xsl:otherwise>
				</xsl:choose>					
			</ctl:code>
		</ctl:test>
		
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-RequestInvalidEventTime.1">
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="owsVersion"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:param name="responseFormat"/>					
			<ctl:param name="observedProperty"/>
			<ctl:param name="offeringId"/>					
			<ctl:assertion>An invalid eventTime in the request produces a valid error message.</ctl:assertion>
			<ctl:comment>Check that an invalid eventTime in the request produces a valid error message.  Pass if an invalid eventTime in the request produces a valid error message; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that an invalid eventTime in the request produces a valid error message.">ATS_URL#SOS.GetObservation-RequestInvalidEventTime</ctl:link>
			<ctl:code>
				<ctl:message select="'*********************************'"/>
				<ctl:message select="'* This test not yet implemented *'"/>
				<ctl:message select="'*********************************'"/>
			</ctl:code>
		</ctl:test>
		
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-RequestInvalidProcedure.1">
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="owsVersion"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:param name="responseFormat"/>					
			<ctl:param name="observedProperty"/>
			<ctl:param name="offeringId"/>	
			<ctl:assertion>An invalid procedure in the request produces a valid error message.</ctl:assertion>
			<ctl:comment>Check that an invalid procedure in the request produces a valid error message.  Pass if an invalid procedure in the request produces a valid error message; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that an invalid procedure in the request produces a valid error message.  This includes providing an empty procedure element or providing one or more procedures that are not advertised for the requested offering in the Capabilities document.">ATS_URL#SOS.GetObservation-RequestInvalidProcedure</ctl:link>
			<ctl:code>
				<xsl:variable name="invalidProcedure" select="'urn:ogc:object:procedure:CITE:WeatherService:ThisIsInvalid'"/>
				<ctl:message select="concat('Making GetObservation request with a &quot;procedure&quot; parameter value that is not advertised in the capabilities document: ', $invalidProcedure, '   ...')"/>									
				<xsl:variable name="getObservation">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$postURL"/>
						</ctl:url>
						<ctl:method>post</ctl:method>
							<ctl:body>								
								<GetObservation 
									xmlns="http://www.opengis.net/sos/1.0" 
									xmlns:ows="http://www.opengis.net/ows/1.1" 
									xmlns:gml="http://www.opengis.net/gml" 
									xmlns:ogc="http://www.opengis.net/ogc" 
									xmlns:om="http://www.opengis.net/om/1.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
									xsi:schemaLocation="http://www.opengis.net/sos/1.0
										C:\Ifgi\OGC_material\schemata_final\svn\swe\trunk\sos\1.0.0/sosGetObservation.xsd" 
									service="SOS"
								>
									<xsl:attribute name="version">
										<xsl:value-of select="$getObservationVersion"/>
									</xsl:attribute>									
									<offering>
										<xsl:value-of select="$offeringId"/>
									</offering>
									<procedure>
										<xsl:value-of select="$invalidProcedure"/>
									</procedure>
									<observedProperty>
										<xsl:value-of select="$observedProperty"/>
									</observedProperty>								
									<responseFormat>
										<xsl:value-of select="$responseFormat"/>
									</responseFormat>	
								</GetObservation>
							</ctl:body>	
							
							<ctl:call-function name="sosFunctions:xmlValidatingParser">												
								<ctl:with-param name="schemaRoot" select="'C:\schemas\SCHEMAS_OPENGIS_NET\'"/>
								<ctl:with-param name="version" select="$owsVersion"/>
								<ctl:with-param name="encoding" select="'ows'"/>
								<ctl:with-param name="filename" select="'owsExceptionReport.xsd'"/>									
							</ctl:call-function>						
							
					</ctl:request>							 														
				</xsl:variable>				
				<xsl:choose>
					<!-- check for valid schema or missing response-->
					<xsl:when test="not($getObservation/*)">							
						<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
						<ctl:message select="concat('Schema file: ', sosFunctions:schemaPath('C:\schemas\SCHEMAS_OPENGIS_NET\', $owsVersion, 'ows', 'owsExceptionReport.xsd'))"/>
						<ctl:fail/>
					</xsl:when>

					<!-- check for correct exception code -->					
					<xsl:when test="not($getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode = 'InvalidParameterValue')">						
						<ctl:message>Invalid exception code.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Exception code is: ', $getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode)"/>
						</ctl:message>
						<ctl:message>Exception code should be: 'InvalidParameterValue'.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<!-- looks good -->
					<xsl:otherwise>
						<ctl:message>OK</ctl:message>
					</xsl:otherwise>
				</xsl:choose>					
			</ctl:code>
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-RequestInvalidObservedProperty.1">
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="owsVersion"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:param name="responseFormat"/>					
			<ctl:param name="offeringId"/>	
			<ctl:assertion>Supplying one or more invalid observedProperty values in the request produces a valid error message.</ctl:assertion>
			<ctl:comment>Check that supplying one or more invalid observedProperty values in the request produces a valid error message.  Pass if an invalid observedProperty value produces a valid error message; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that one or more invalid observedProperty values cause the server to return a valid error message.  This includes providing empty observedProperty elements or providing observedProperty values that do not correspond with the observedProperty values advertised in the Capabilities document for the requested offering.">ATS_URL#SOS.GetObservation-RequestInvalidObservedProperty</ctl:link>
			<ctl:code>
				<xsl:variable name="invalidObservedProperty" select="'urn:ogc:def:phenomenon:OGC:TheInvalidObservedProperty'"/>
				<ctl:message select="concat('Making GetObservation request with an &quot;observedProperty&quot; parameter value that is not advertised in the capabilities document: ', $invalidObservedProperty, '   ...')"/>									
				<xsl:variable name="getObservation">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$postURL"/>
						</ctl:url>
						<ctl:method>post</ctl:method>
							<ctl:body>								
								<GetObservation 
									xmlns="http://www.opengis.net/sos/1.0" 
									xmlns:ows="http://www.opengis.net/ows/1.1" 
									xmlns:gml="http://www.opengis.net/gml" 
									xmlns:ogc="http://www.opengis.net/ogc" 
									xmlns:om="http://www.opengis.net/om/1.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
									xsi:schemaLocation="http://www.opengis.net/sos/1.0
										C:\Ifgi\OGC_material\schemata_final\svn\swe\trunk\sos\1.0.0/sosGetObservation.xsd" 
									service="SOS"
								>
									<xsl:attribute name="version">
										<xsl:value-of select="$getObservationVersion"/>
									</xsl:attribute>									
									<offering>
										<xsl:value-of select="$offeringId"/>
									</offering>
									<observedProperty>
										<xsl:value-of select="$invalidObservedProperty"/>
									</observedProperty>								
									<responseFormat>
										<xsl:value-of select="$responseFormat"/>
									</responseFormat>	
								</GetObservation>
							</ctl:body>	
							
							<ctl:call-function name="sosFunctions:xmlValidatingParser">												
								<ctl:with-param name="schemaRoot" select="'C:\schemas\SCHEMAS_OPENGIS_NET\'"/>
								<ctl:with-param name="version" select="$owsVersion"/>
								<ctl:with-param name="encoding" select="'ows'"/>
								<ctl:with-param name="filename" select="'owsExceptionReport.xsd'"/>									
							</ctl:call-function>						
							
					</ctl:request>							 														
				</xsl:variable>		
		
				<xsl:choose>
					<!-- check for valid schema or missing response-->
					<xsl:when test="not($getObservation/*)">							
						<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
						<ctl:message select="concat('Schema file: ', sosFunctions:schemaPath('C:\schemas\SCHEMAS_OPENGIS_NET\', $owsVersion, 'ows', 'owsExceptionReport.xsd'))"/>
						<ctl:fail/>
					</xsl:when>

					<!-- check for correct exception code -->					
					<xsl:when test="not($getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode = 'InvalidParameterValue')">						
						<ctl:message>Invalid exception code.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Exception code is: ', $getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode)"/>
						</ctl:message>
						<ctl:message>Exception code should be: 'InvalidParameterValue'.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<!-- looks good -->
					<xsl:otherwise>
						<ctl:message>OK</ctl:message>
					</xsl:otherwise>
				</xsl:choose>	
			</ctl:code>		
		</ctl:test>
		
<!--*****************************************************************************************************************************************************************************-->						
		<ctl:test name="getObservation:core-SOS.GetObservation-RequestInvalidFeatureOfInterest.1">
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="owsVersion"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:param name="responseFormat"/>					
			<ctl:param name="observedProperty"/>
			<ctl:param name="offeringId"/>					
			<ctl:assertion>Supplying one or more invalid featureOfInterest values in the request produces a valid error message.</ctl:assertion>
			<ctl:comment>Check that supplying one or more invalid featureOfInterest values in the request produces a valid error message.  Pass if one or more invalid featureOfInterest values in the request produces a valid error message; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that an invalid named gml feature in the featureOfInterest value of the request causes the server to produce a valid error message.  This includes providing an empty featureOfInterest element or providing a named gml feature value in the featureOfInterest that does not correspond with the featureOfInterest values advertised in the Capabilities document for the requested offering.">ATS_URL#SOS.GetObservation-RequestInvalidFeatureOfInterest</ctl:link>
			<ctl:code>			
				<ctl:message select="'*********************************'"/>
				<ctl:message select="'* This test not yet implemented *'"/>
				<ctl:message select="'*********************************'"/>
			</ctl:code>
		</ctl:test>
		
<!--*****************************************************************************************************************************************************************************-->				
		
		<ctl:test name="getObservation:core-SOS.GetObservation-RequestInvalidResult.1">
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="owsVersion"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:param name="responseFormat"/>					
			<ctl:param name="observedProperty"/>
			<ctl:param name="offeringId"/>	
			<ctl:assertion>Providing an invalid value in the result field produces a valid error message.</ctl:assertion>
			<ctl:comment>Check that providing an invalid value in the result field produces a valid error message.  Pass if a valid error message is produced from providing an invalid value in the result field; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that supplying an invalid value in the result parameter produces a valid error message.  This includes providing an empty result element or providing a result element that is not advertised in the Filter_Capabilities section of the Capabilities document.">ATS_URL#SOS.GetObservation-RequestInvalidResult</ctl:link>
			<ctl:code>
				<ctl:message select="'*********************************'"/>
				<ctl:message select="'* This test not yet implemented *'"/>
				<ctl:message select="'*********************************'"/>
			</ctl:code>
		</ctl:test>
		
<!--*****************************************************************************************************************************************************************************-->						
		<ctl:test name="getObservation:core-SOS.GetObservation-RequestInvalidResponseFormat.1">
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="owsVersion"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>							
			<ctl:param name="observedProperty"/>
			<ctl:param name="offeringId"/>	
			<ctl:assertion>Providing an invalid outputFormat value produces a valid error message.</ctl:assertion>
			<ctl:comment>Check that providing an invalid outputFormat value produces a valid error message.  Pass if an invalid outputFormat produces a valid error message; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that providing an invalid outputFormat value in the request produces a valid error message.  This includes any outputFormat value that is not advertised by the requested offering in the Capabilities document.">ATS_URL#SOS.GetObservation-RequestInvalidResponseFormat</ctl:link>
			<ctl:code>
				<xsl:variable name="invalidResponseFormat" select="'text/xml;subtype=&quot;XX&quot;'"/>
				<ctl:message select="concat('Making GetObservation request with an &quot;responseFormat&quot; parameter value that is not advertised in the capabilities document: ', $invalidResponseFormat, '   ...')"/>									
				<xsl:variable name="getObservation">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$postURL"/>
						</ctl:url>
						<ctl:method>post</ctl:method>
							<ctl:body>								
								<GetObservation 
									xmlns="http://www.opengis.net/sos/1.0" 
									xmlns:ows="http://www.opengis.net/ows/1.1" 
									xmlns:gml="http://www.opengis.net/gml" 
									xmlns:ogc="http://www.opengis.net/ogc" 
									xmlns:om="http://www.opengis.net/om/1.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
									xsi:schemaLocation="http://www.opengis.net/sos/1.0
										C:\Ifgi\OGC_material\schemata_final\svn\swe\trunk\sos\1.0.0/sosGetObservation.xsd" 
									service="SOS"
								>
									<xsl:attribute name="version">
										<xsl:value-of select="$getObservationVersion"/>
									</xsl:attribute>									
									<offering>
										<xsl:value-of select="$offeringId"/>
									</offering>
									<observedProperty>
										<xsl:value-of select="$observedProperty"/>
									</observedProperty>								
									<responseFormat>
										<xsl:value-of select="$invalidResponseFormat"/>
									</responseFormat>	
								</GetObservation>
							</ctl:body>	
							
							<ctl:call-function name="sosFunctions:xmlValidatingParser">												
								<ctl:with-param name="schemaRoot" select="'C:\schemas\SCHEMAS_OPENGIS_NET\'"/>
								<ctl:with-param name="version" select="$owsVersion"/>
								<ctl:with-param name="encoding" select="'ows'"/>
								<ctl:with-param name="filename" select="'owsExceptionReport.xsd'"/>									
							</ctl:call-function>						
							
					</ctl:request>							 														
				</xsl:variable>		
		
				<xsl:choose>
					<!-- check for valid schema or missing response-->
					<xsl:when test="not($getObservation/*)">							
						<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
						<ctl:message select="concat('Schema file: ', sosFunctions:schemaPath('C:\schemas\SCHEMAS_OPENGIS_NET\', $owsVersion, 'ows', 'owsExceptionReport.xsd'))"/>
						<ctl:fail/>
					</xsl:when>

					<!-- check for correct exception code -->					
					<xsl:when test="not($getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode = 'InvalidParameterValue')">						
						<ctl:message>Invalid exception code.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Exception code is: ', $getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode)"/>
						</ctl:message>
						<ctl:message>Exception code should be: 'InvalidParameterValue'.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<!-- looks good -->
					<xsl:otherwise>
						<ctl:message>OK</ctl:message>
					</xsl:otherwise>
				</xsl:choose>	
			</ctl:code>		
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->						
		<ctl:test name="getObservation:core-SOS.GetObservation-RequestInvalidResultModel.1">
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="owsVersion"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:param name="responseFormat"/>					
			<ctl:param name="observedProperty"/>
			<ctl:param name="offeringId"/>	
			<ctl:assertion>Providing an invalid resultModel in the request produces a valid error message.</ctl:assertion>
			<ctl:comment>Check that providing an invalid resultModel in the request produces a valid error message.  Pass if providing an invalid resultModel in the request produces a valid error message; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that providing an invalid resultModel value in the request produces a valid error message.  This includes any resultModel value that is not advertised by the requested offering in the Capabilities document.">ATS_URL#SOS.GetObservation-RequestInvalidResultModel</ctl:link>
			<ctl:code>
				<xsl:variable name="invalidResultModel" select="'TheBogusOne'"/>
				<ctl:message select="concat('Making GetObservation request with a &quot;resultModel&quot; parameter value that is not advertised in the capabilities document: ', $invalidResultModel, '   ...')"/>									
				<xsl:variable name="getObservation">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$postURL"/>
						</ctl:url>
						<ctl:method>post</ctl:method>
							<ctl:body>								
								<GetObservation 
									xmlns="http://www.opengis.net/sos/1.0" 
									xmlns:ows="http://www.opengis.net/ows/1.1" 
									xmlns:gml="http://www.opengis.net/gml" 
									xmlns:ogc="http://www.opengis.net/ogc" 
									xmlns:om="http://www.opengis.net/om/1.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
									xsi:schemaLocation="http://www.opengis.net/sos/1.0
										C:\Ifgi\OGC_material\schemata_final\svn\swe\trunk\sos\1.0.0/sosGetObservation.xsd" 
									service="SOS"
								>
									<xsl:attribute name="version">
										<xsl:value-of select="$getObservationVersion"/>
									</xsl:attribute>									
									<offering>
										<xsl:value-of select="$offeringId"/>
									</offering>

									<observedProperty>
										<xsl:value-of select="$observedProperty"/>
									</observedProperty>								
									<responseFormat>
										<xsl:value-of select="$responseFormat"/>
									</responseFormat>	
									<resultModel>
										<xsl:value-of select="$invalidResultModel"/>
									</resultModel>									
								</GetObservation>
							</ctl:body>	
							
							<ctl:call-function name="sosFunctions:xmlValidatingParser">												
								<ctl:with-param name="schemaRoot" select="'C:\schemas\SCHEMAS_OPENGIS_NET\'"/>
								<ctl:with-param name="version" select="$owsVersion"/>
								<ctl:with-param name="encoding" select="'ows'"/>
								<ctl:with-param name="filename" select="'owsExceptionReport.xsd'"/>									
							</ctl:call-function>						
							
					</ctl:request>							 														
				</xsl:variable>		
		
				<xsl:choose>
					<!-- check for valid schema or missing response-->
					<xsl:when test="not($getObservation/*)">							
						<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
						<ctl:message select="concat('Schema file: ', sosFunctions:schemaPath('C:\schemas\SCHEMAS_OPENGIS_NET\', $owsVersion, 'ows', 'owsExceptionReport.xsd'))"/>
						<ctl:fail/>
					</xsl:when>

					<!-- check for correct exception code -->					
					<xsl:when test="not($getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode = 'InvalidParameterValue')">						
						<ctl:message>Invalid exception code.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Exception code is: ', $getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode)"/>
						</ctl:message>
						<ctl:message>Exception code should be: 'InvalidParameterValue'.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<!-- looks good -->
					<xsl:otherwise>
						<ctl:message>OK</ctl:message>
					</xsl:otherwise>
				</xsl:choose>	
			</ctl:code>		
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-RequestInvalidResponseMode.1">
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="owsVersion"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:param name="responseFormat"/>					
			<ctl:param name="observedProperty"/>
			<ctl:param name="offeringId"/>	
			<ctl:assertion>Providing an invalid responseMode in the request produces a valid error message.</ctl:assertion>
			<ctl:comment>Check that providing an invalid responseMode in the request produces a valid error message.  Pass if providing an invalid responseMode in the request produces a valid error mesage; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that providing an invalid responseMode in the request produces a valid error message.  This includes any responseMode that is not advertised by the requested offering in the Capabilities document.">ATS_URL#SOS.GetObservation-RequestInvalidResponseMode</ctl:link>
			<ctl:code>
				<xsl:variable name="invalidResponseMode" select="'NotValid'"/>
				<ctl:message select="concat('Making GetObservation request with a &quot;resultModel&quot; parameter value that is not advertised in the capabilities document: ', $invalidResponseMode, '   ...')"/>									
				<xsl:variable name="getObservation">
					<ctl:request>
						<ctl:url>
							<xsl:value-of select="$postURL"/>
						</ctl:url>
						<ctl:method>post</ctl:method>
							<ctl:body>								
								<GetObservation 
									xmlns="http://www.opengis.net/sos/1.0" 
									xmlns:ows="http://www.opengis.net/ows/1.1" 
									xmlns:gml="http://www.opengis.net/gml" 
									xmlns:ogc="http://www.opengis.net/ogc" 
									xmlns:om="http://www.opengis.net/om/1.0" 
									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
									xsi:schemaLocation="http://www.opengis.net/sos/1.0
										C:\Ifgi\OGC_material\schemata_final\svn\swe\trunk\sos\1.0.0/sosGetObservation.xsd" 
									service="SOS"
								>
									<xsl:attribute name="version">
										<xsl:value-of select="$getObservationVersion"/>
									</xsl:attribute>									
									<offering>
										<xsl:value-of select="$offeringId"/>
									</offering>

									<observedProperty>
										<xsl:value-of select="$observedProperty"/>
									</observedProperty>								
									<responseFormat>
										<xsl:value-of select="$responseFormat"/>
									</responseFormat>	
									<responseMode>
										<xsl:value-of select="$invalidResponseMode"/>
									</responseMode>									
								</GetObservation>
							</ctl:body>	
							
							<ctl:call-function name="sosFunctions:xmlValidatingParser">												
								<ctl:with-param name="schemaRoot" select="'C:\schemas\SCHEMAS_OPENGIS_NET\'"/>
								<ctl:with-param name="version" select="$owsVersion"/>
								<ctl:with-param name="encoding" select="'ows'"/>
								<ctl:with-param name="filename" select="'owsExceptionReport.xsd'"/>									
							</ctl:call-function>						
							
					</ctl:request>							 														
				</xsl:variable>		
		
				<xsl:choose>
					<!-- check for valid schema or missing response-->
					<xsl:when test="not($getObservation/*)">							
						<ctl:message>Exception report failed schema validation, or no exception was produced.</ctl:message>
						<ctl:message select="concat('Schema file: ', sosFunctions:schemaPath('C:\schemas\SCHEMAS_OPENGIS_NET\', $owsVersion, 'ows', 'owsExceptionReport.xsd'))"/>
						<ctl:fail/>
					</xsl:when>

					<!-- check for correct exception code -->					
					<xsl:when test="not($getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode = 'InvalidParameterValue')">						
						<ctl:message>Invalid exception code.</ctl:message>
						<ctl:message>
							<xsl:value-of select="concat('Exception code is: ', $getObservation/ows:ExceptionReport/ows:Exception/@exceptionCode)"/>
						</ctl:message>
						<ctl:message>Exception code should be: 'InvalidParameterValue'.</ctl:message>
						<ctl:fail/>
					</xsl:when>
					<!-- looks good -->
					<xsl:otherwise>
						<ctl:message>OK</ctl:message>
					</xsl:otherwise>
				</xsl:choose>	
			</ctl:code>
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-ResponseMatchingSRSData.1">
			<ctl:param name="capabilitiesDocument"/>
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:assertion>If an srsName value is supplied in the request, then the srs of the response data is valid according to the format specified by the requested srsName.</ctl:assertion>
			<ctl:comment>Check if an srsName value is supplied in the request, then the srs of the response data is valid according to the format specified by the requested srsName.  Pass if assertion holds; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the srs of the returned data is in the correct format given the requested srsName.">ATS_URL#SOS.GetObservation-ResponseMatchingSRSData</ctl:link>
			<ctl:code>					
				<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering/@gml:id">
				<xsl:variable name="offeringId" select="."/>
					<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:responseFormat">
						<xsl:variable name="responseFormat" select="."/>
						<xsl:for-each select="distinct-values($capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//@srsName)">
							<xsl:variable name="srsName" select="."/>		
							<ctl:message select="'****'"/>
							<ctl:message select="concat('Making GetObservation request with an valid &quot;srsName&quot; parameter of: ', $srsName, '   ...')"/>									
							<xsl:variable name="getObservation">
								<ctl:request>
									<ctl:url>
										<xsl:value-of select="$postURL"/>
									</ctl:url>
									<ctl:method>post</ctl:method>
										<ctl:body>								
											<GetObservation 
												xmlns="http://www.opengis.net/sos/1.0" 
												xmlns:ows="http://www.opengis.net/ows/1.1" 
												xmlns:gml="http://www.opengis.net/gml" 
												xmlns:ogc="http://www.opengis.net/ogc" 
												xmlns:om="http://www.opengis.net/om/1.0" 
												xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
												xsi:schemaLocation="http://www.opengis.net/sos/1.0
													C:\Ifgi\OGC_material\schemata_final\svn\swe\trunk\sos\1.0.0/sosGetObservation.xsd" 
												service="SOS"
											>
												<xsl:attribute name="version">
													<xsl:value-of select="$getObservationVersion"/>
												</xsl:attribute>
												<xsl:attribute name="srsName">
													<xsl:value-of select="$srsName"/>
												</xsl:attribute>									
												<offering><xsl:value-of select="$offeringId"/></offering>
												<observedProperty>
													<xsl:value-of select="sosFunctions:observationOfferingObservedProperty($capabilitiesDocument, $offeringId)"/>
												</observedProperty>
												<responseFormat>
													<xsl:value-of select="$responseFormat"/>
												</responseFormat>										
											</GetObservation>						
										</ctl:body>	
									
									<!--
									<ctl:call-function name="sosFunctions:xmlValidatingParser">											
										<ctl:with-param name="schemaFile" select="sosFunctions:schemaPathFromMimeType('C:\schemas\swe\', $responseFormat)"/>
									</ctl:call-function>						
									-->
									
									</ctl:request>							 														
							</xsl:variable>		

							<xsl:choose>
								<!-- check for valid schema or missing response-->
								<xsl:when test="not($getObservation/*)">							
									<ctl:message>Response failed schema validation.</ctl:message>
									<ctl:message select="concat('Schema file: ', sosFunctions:schemaPathFromMimeType('C:\schemas\swe\', $responseFormat))"/>
									<ctl:fail/>
								</xsl:when>
								<xsl:otherwise>
								
								<xsl:for-each select="distinct-values($getObservation//@srsName)">
									<xsl:variable name="thisSRSName" select="."/>
									<xsl:choose>
										<xsl:when test="not($thisSRSName = $srsName)">													
											<ctl:message>
												<xsl:value-of select="concat('Invalid SRSName: ', $thisSRSName)"/>
											</ctl:message>							
											<ctl:fail/>
										</xsl:when>
										<!-- looks good -->
										<xsl:otherwise>
											<xsl:message select="concat('SRSName in response is OK: ', $thisSRSName)"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
								</xsl:otherwise>
							</xsl:choose>			
						</xsl:for-each>				
					</xsl:for-each>		
				</xsl:for-each>		
			</ctl:code>
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-ResponseMatchingProcedureData.1">
			<ctl:param name="capabilitiesDocument"/>
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>						
			<ctl:assertion>The procedure value(s) in the response match or a subset of the procedure value(s) specified in the request.</ctl:assertion>
			<ctl:comment>Check that the procedure value(s) in the response match or are a subset of the procedure value(s) specified in the request.  Pass if assertion holds; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the procedure value(s) in the response match or are a subset of the procedure value(s) specified in the request.">ATS_URL#SOS.GetObservation-ResponseMatchingProcedureData</ctl:link>
			<ctl:code>
				<ctl:message select="''"/>
				<ctl:message select="'A GetObservation request will be made for each procedure advertised in the capabilities document'"/>
				<ctl:message select="''"/>

				<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering/@gml:id">
				<xsl:variable name="offeringId" select="."/>
					<ctl:message select="concat('Offering: ', $offeringId)"/>
					<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:responseFormat">
						<xsl:variable name="responseFormat" select="."/>	
						<ctl:message select="concat('ResponseFormat: ', $responseFormat)"/>						
						<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:procedure/@xlink:href">
							<xsl:variable name="procedure" select="."/>
							<ctl:message select="concat('Testing procedure: ', $procedure )"/>
							<xsl:variable name="getObservation">
								<ctl:request>
									<ctl:url>
										<xsl:value-of select="$postURL"/>
									</ctl:url>
									<ctl:method>post</ctl:method>
									<ctl:body>								
										<GetObservation 
											xmlns="http://www.opengis.net/sos/1.0" 
											xmlns:ows="http://www.opengis.net/ows/1.1" 
											xmlns:gml="http://www.opengis.net/gml" 
											xmlns:ogc="http://www.opengis.net/ogc" 
											xmlns:om="http://www.opengis.net/om/1.0" 
											xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
											xsi:schemaLocation="http://www.opengis.net/sos/1.0
											C:\Ifgi\OGC_material\schemata_final\svn\swe\trunk\sos\1.0.0/sosGetObservation.xsd" 
											service="SOS"
										>
											<xsl:attribute name="version">
												<xsl:value-of select="$getObservationVersion"/>
											</xsl:attribute>									
											<offering>
												<xsl:value-of select="$offeringId"/>
											</offering>
											<procedure>
												<xsl:value-of select="$procedure"/>
											</procedure>									
											<observedProperty>
												<xsl:value-of select="sosFunctions:observationOfferingObservedProperty($capabilitiesDocument, $offeringId)"/>
											</observedProperty>
											<responseFormat>
												<xsl:value-of select="$responseFormat"/>
											</responseFormat>										
										</GetObservation>						
									</ctl:body>	
									<!--
									<ctl:call-function name="sosFunctions:xmlValidatingParser">											
										<ctl:with-param name="schemaFile" select="sosFunctions:schemaPathFromMimeType('C:\schemas\swe\', $responseFormat)"/>
									</ctl:call-function>
									-->
								</ctl:request>							 														
							</xsl:variable>			
					
							<xsl:choose>
								<!-- check for valid schema or missing response-->
								<xsl:when test="not($getObservation/*)">							
									<ctl:message>Response failed schema validation.</ctl:message>
									<ctl:message select="concat('Schema file: ', sosFunctions:schemaPathFromMimeType('C:\schemas\swe\', $responseFormat))"/>
									<ctl:fail/>
								</xsl:when>
								<xsl:otherwise>
								<xsl:for-each select="distinct-values($getObservation//om:procedure/@xlink:href)">
									<xsl:variable name="thisProcedure" select="."/>
									<xsl:choose>
										<xsl:when test="not($thisProcedure = $procedure)">													
											<ctl:message>
												<xsl:value-of select="concat('Invalid procedure: ', $thisProcedure)"/>
											</ctl:message>							
											<ctl:fail/>
										</xsl:when>
										<!-- looks good -->
										<xsl:otherwise>
											<xsl:message select="concat('Procedure in response is OK: ', $thisProcedure)"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
								</xsl:otherwise>
							</xsl:choose>	
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</ctl:code>
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-ResponseMatchingObservedPropertyData.1">
			<ctl:param name="capabilitiesDocument"/>
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>								
			<ctl:assertion>The observedProperty value(s) in the response match or are a subset of the observedProperty value(s) specified in the request.</ctl:assertion>
			<ctl:comment>Check the observedProperty value(s) in the response match or are a subset of the observedProperty value(s) specified in the request.  Pass if assertion holds; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the observedProperty value(s) in the response match or are a subset of the observedProperty value(s) specified in the request.">ATS_URL#SOS.GetObservation-ResponseMatchingObservedPropertyData</ctl:link>
			<ctl:code>
				<ctl:message select="''"/>
				<ctl:message select="'A GetObservation request will be made for each procedure advertised in the capabilities document'"/>
				<ctl:message select="''"/>

				<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering/@gml:id">
				<xsl:variable name="offeringId" select="."/>
					<ctl:message select="concat('Offering: ', $offeringId)"/>
					<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:responseFormat">
						<xsl:variable name="responseFormat" select="."/>	
						<ctl:message select="concat('ResponseFormat: ', $responseFormat)"/>
						<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:observedProperty/@xlink:href">
							<xsl:variable name="observedProperty" select="."/>
							<ctl:message select="concat('Testing observedProperty: ', $observedProperty )"/>
							<xsl:variable name="getObservation">
								<ctl:request>
									<ctl:url>
										<xsl:value-of select="$postURL"/>
									</ctl:url>
									<ctl:method>post</ctl:method>
									<ctl:body>								
										<GetObservation 
											xmlns="http://www.opengis.net/sos/1.0" 
											xmlns:ows="http://www.opengis.net/ows/1.1" 
											xmlns:gml="http://www.opengis.net/gml" 
											xmlns:ogc="http://www.opengis.net/ogc" 
											xmlns:om="http://www.opengis.net/om/1.0" 
											xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
											xsi:schemaLocation="http://www.opengis.net/sos/1.0
											C:\Ifgi\OGC_material\schemata_final\svn\swe\trunk\sos\1.0.0/sosGetObservation.xsd" 
											service="SOS"
										>
											<xsl:attribute name="version">
												<xsl:value-of select="$getObservationVersion"/>
											</xsl:attribute>									
											<offering>
												<xsl:value-of select="$offeringId"/>
											</offering>							
											<observedProperty>
												<xsl:value-of select="$observedProperty"/>
											</observedProperty>
											<responseFormat>
												<xsl:value-of select="$responseFormat"/>
											</responseFormat>										
										</GetObservation>						
									</ctl:body>	
									<!--
									<ctl:call-function name="sosFunctions:xmlValidatingParser">											
										<ctl:with-param name="schemaFile" select="sosFunctions:schemaPathFromMimeType('C:\schemas\swe\', $responseFormat)"/>
									</ctl:call-function>
									-->
								</ctl:request>							 														
							</xsl:variable>			
					
							<xsl:choose>
								<!-- check for valid schema or missing response-->
								<xsl:when test="not($getObservation/*)">							
									<ctl:message>Response failed schema validation.</ctl:message>
									<ctl:message select="concat('Schema file: ', sosFunctions:schemaPathFromMimeType('C:\schemas\swe\', $responseFormat))"/>
									<ctl:fail/>
								</xsl:when>									
								<xsl:when test="not($getObservation//om:observedProperty//*[@xlink:href=$observedProperty])">
									<ctl:message select="concat('Response does not contain the observedProperty: ', $observedProperty)"/>
									<ctl:fail/>
								</xsl:when>															
								<xsl:otherwise>
									<xsl:message select="'OK'"/>
								</xsl:otherwise>
							</xsl:choose>							
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</ctl:code>
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-ResponseAdvertisedEventTimeData.1">
			<ctl:param name="serviceURL"/>
			<ctl:assertion>The server returns one or more observations when the advertised eventTime for the requested offering is supplied in a valid request.</ctl:assertion>
			<ctl:comment>Check that the server returns one or more observations when the advertised eventTime for the requested offering is supplied in a valid request.  Pass if one more observations are returned when supplied a valid request; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that requesting data for the advertised eventTime for each offering returns one or more observations.">ATS_URL#SOS.GetObservation-ResponseAdvertisedEventTimeData</ctl:link>
			<ctl:code>				<!--PUT TEST CODE HERE-->
				<ctl:message select="'*********************************'"/>
				<ctl:message select="'* This test not yet implemented *'"/>
				<ctl:message select="'*********************************'"/>
			</ctl:code>
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-ResponseMatchingEventTimeData.1">
			<ctl:param name="serviceURL"/>
			<ctl:assertion>The time value(s) in the response data fall within the requested eventTime.</ctl:assertion>
			<ctl:comment>Check the time value(s) in the response data fall within the requested eventTime.  Pass if assertion holds; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the time values in the response data fall within the requested eventTime.  If no eventTime is specified, then any data from any time period matching the other request parameters must be returned.  If the requested eventTime range falls outside of the advertised eventTime range and overlaps the advertised event time range, then the data returned should fall within the advertised eventTime range for the requested offering.">ATS_URL#SOS.GetObservation-ResponseMatchingEventTimeData</ctl:link>
			<ctl:code>				<!--PUT TEST CODE HERE-->
				<ctl:message select="'*********************************'"/>
				<ctl:message select="'* This test not yet implemented *'"/>
				<ctl:message select="'*********************************'"/>
			</ctl:code>
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-ResponseMatchingFeatureOfInterestData.1">
			<ctl:param name="serviceURL"/>
			<ctl:assertion>The featureOfInterest value(s) in the response match or fall within the spatial extent identified in the featureOfInterest value specified in the request.</ctl:assertion>
			<ctl:comment>Check the featureOfInterest value(s) in the response match or fall within the spatial extent identified in the featureOfInterest value specified in the request.  Pass if assertion holds; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the featureOfInterest values in the response data match the requested featureOfInterest for a named gml feature or fall within the requested spatial extents for a spatially defined featureOfInterest">ATS_URL#SOS.GetObservation-ResponseMatchingFeatureOfInterestData</ctl:link>
			<ctl:code>				<!--PUT TEST CODE HERE-->
				<ctl:message select="'*********************************'"/>
				<ctl:message select="'* This test not yet implemented *'"/>
				<ctl:message select="'*********************************'"/>
			</ctl:code>
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-ResponseMatchingResultData.1">
			<ctl:param name="serviceURL"/>
			<ctl:assertion>If a valid filter value is supplied in the result parameter of the request, then the response O &amp; M data is valid for that filter.</ctl:assertion>
			<ctl:comment>Check that if a valid filter value is supplied in the result parameter of the request, then the response O &amp; M data is valid for that filter.  Pass if response O &amp; M data is valid for the filter when supplied a valid filter; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that OM response data is valid for the filter contained in the result parameter of the request, if a result parameter is specified.">ATS_URL#SOS.GetObservation-ResponseMatchingResultData</ctl:link>
			<ctl:code>				<!--PUT TEST CODE HERE-->
				<ctl:message select="'*********************************'"/>
				<ctl:message select="'* This test not yet implemented *'"/>
				<ctl:message select="'*********************************'"/>
			</ctl:code>
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-ResponseMatchingResponseFormatData.1">
			<ctl:param name="capabilitiesDocument"/>
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:assertion> The format of the response data matches the format supplied in the responseFormat parameter of the request.</ctl:assertion>
			<ctl:comment>Check that the format of the response data matches the format supplied in the responseFormat parameter of the request.  Pass if assertion holds; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the format of the response data matches the requested format supplied in the responseFormat parameter.  If the requested responseFormat is TML, then the response will be an O &amp; M document with a link to the TML stream.">ATS_URL#SOS.GetObservation-ResponseMatchingResponseFormatData</ctl:link>
			<ctl:code>				<!--Response Format is per offering-->
				<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering/@gml:id">
				<xsl:variable name="offeringId" select="."/>
					<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:responseFormat">
						<xsl:variable name="responseFormat" select="."/>	
						<ctl:message select="'****'"/>
						<ctl:message select="concat('Making GetObservation request with a valid &quot;repsonseFormat&quot; parameter of: ', $responseFormat, '   ...')"/>
						<xsl:variable name="getObservation">
							<ctl:request>
								<ctl:url>
									<xsl:value-of select="$postURL"/>
								</ctl:url>
								<ctl:method>post</ctl:method>
									<ctl:body>								
										<GetObservation 
											xmlns="http://www.opengis.net/sos/1.0" 
											xmlns:ows="http://www.opengis.net/ows/1.1" 
											xmlns:gml="http://www.opengis.net/gml" 
											xmlns:ogc="http://www.opengis.net/ogc" 
											xmlns:om="http://www.opengis.net/om/1.0" 
											xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
											xsi:schemaLocation="http://www.opengis.net/sos/1.0
												C:\Ifgi\OGC_material\schemata_final\svn\swe\trunk\sos\1.0.0/sosGetObservation.xsd" 
											service="SOS"
										>
											<xsl:attribute name="version">
												<xsl:value-of select="$getObservationVersion"/>
											</xsl:attribute>									
											<offering><xsl:value-of select="$offeringId"/></offering>
											<observedProperty>
													<xsl:value-of select="sosFunctions:observationOfferingObservedProperty($capabilitiesDocument, $offeringId)"/>
											</observedProperty>
											<responseFormat>
												<xsl:value-of select="$responseFormat"/>
											</responseFormat>										
										</GetObservation>						
									</ctl:body>	
								<!--											
								<ctl:call-function name="sosFunctions:xmlValidatingParser">											
									<ctl:with-param name="schemaFile" select="sosFunctions:schemaPathFromMimeType('C:\schemas\swe\', $responseFormat)"/>
								</ctl:call-function>														
								-->
							</ctl:request>							 														
						</xsl:variable>		

						<xsl:choose>
							<!-- check for valid schema or missing response-->
							<xsl:when test="not($getObservation/*)">							
								<ctl:message>Response failed schema validation.</ctl:message>
								<ctl:message select="concat('Schema file: ', sosFunctions:schemaPathFromMimeType('C:\schemas\swe\', $responseFormat))"/>
								<ctl:message select="concat('Response is NOT a valid ', $responseFormat, ' document.')"/>
								<ctl:fail/>
							</xsl:when>
							<xsl:otherwise>								
								<ctl:message select="concat('Response is a valid ', $responseFormat, ' document.')"/>
								<ctl:message>OK</ctl:message>
							</xsl:otherwise>
						</xsl:choose>					
					</xsl:for-each>		
				</xsl:for-each>		
			</ctl:code>
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-ResponseMatchingResultModel.1">
			<ctl:param name="capabilitiesDocument"/>
			<ctl:param name="ogcSchemaRoot"/>
			<ctl:param name="postURL"/>
			<ctl:param name="getObservationVersion"/>
			<ctl:assertion>The format of the response data matches the requested resultModel.</ctl:assertion>
			<ctl:comment>Check that the format of the response data matches the requested resultModel.  Pass if assertion holds; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the format of the response data matches the requested resultModel">ATS_URL#SOS.GetObservation-ResponseMatchingResultModel</ctl:link>
			<ctl:code>				<!-- Result Model is per offering-->
				<ctl:message select="''"/>
				<ctl:message select="'A GetObservation request will be made for each resultModel advertised in the capabilities document'"/>
				<ctl:message select="''"/>

				<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering/@gml:id">
				<xsl:variable name="offeringId" select="."/>
					<ctl:message select="concat('Offering: ', $offeringId)"/>
					<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:responseFormat">
						<xsl:variable name="responseFormat" select="."/>	
						<ctl:message select="concat('ResponseFormat: ', $responseFormat)"/>						
						<xsl:for-each select="$capabilitiesDocument//sos:ObservationOffering[@gml:id=$offeringId]//sos:resultModel">
							<xsl:variable name="resultModel" select="."/>
							<ctl:message select="concat('Testing resultModel: ', $resultModel )"/>
							<xsl:variable name="getObservation">
								<ctl:request>
									<ctl:url>
										<xsl:value-of select="$postURL"/>
									</ctl:url>
									<ctl:method>post</ctl:method>
									<ctl:body>								
										<GetObservation 
											xmlns="http://www.opengis.net/sos/1.0" 
											xmlns:ows="http://www.opengis.net/ows/1.1" 
											xmlns:gml="http://www.opengis.net/gml" 
											xmlns:ogc="http://www.opengis.net/ogc" 
											xmlns:om="http://www.opengis.net/om/1.0" 
											xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
											xsi:schemaLocation="http://www.opengis.net/sos/1.0
											C:\Ifgi\OGC_material\schemata_final\svn\swe\trunk\sos\1.0.0/sosGetObservation.xsd" 
											service="SOS"
										>
											<xsl:attribute name="version">
												<xsl:value-of select="$getObservationVersion"/>
											</xsl:attribute>									
											<offering>
												<xsl:value-of select="$offeringId"/>
											</offering>
											<observedProperty>
												<xsl:value-of select="sosFunctions:observationOfferingObservedProperty($capabilitiesDocument, $offeringId)"/>
											</observedProperty>
											<responseFormat>
												<xsl:value-of select="$responseFormat"/>
											</responseFormat>	
											<resultModel>
												<xsl:value-of select="$resultModel"/>
											</resultModel>											
										</GetObservation>						
									</ctl:body>	
									
									<ctl:call-function name="sosFunctions:xmlValidatingParser">											
										<ctl:with-param name="schemaFile" select="sosFunctions:schemaPathFromMimeType('C:\schemas\swe\', $responseFormat)"/>
									</ctl:call-function>
									
								</ctl:request>							 														
							</xsl:variable>			

							<xsl:choose>
								<!-- check for valid schema or missing response-->
								<xsl:when test="not($getObservation/*)">							
									<ctl:message>Response failed schema validation.</ctl:message>
									<ctl:message select="concat('Schema file: ', sosFunctions:schemaPathFromMimeType('C:\schemas\swe\', $responseFormat))"/>
									<ctl:fail/>
								</xsl:when>
								<!--
								<xsl:otherwise>
								
								<xsl:for-each select="distinct-values($getObservation//om:procedure/@xlink:href)">
									<xsl:variable name="thisResultModel" select="."/>
									<xsl:choose>
										<xsl:when test="not($thisResultModel = $resultModel)">													
											<ctl:message>
												<xsl:value-of select="concat('Invalid procedure: ', $thisResultModel)"/>
											</ctl:message>							
											<ctl:fail/>
										</xsl:when>
										
										<xsl:otherwise>
											<xsl:message select="concat('Procedure in response is OK: ', $thisResultModel)"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
								</xsl:otherwise>
								-->
							</xsl:choose>	
						</xsl:for-each>
					</xsl:for-each>
				</xsl:for-each>
			</ctl:code>
		</ctl:test>
<!--*****************************************************************************************************************************************************************************-->				
		<ctl:test name="getObservation:core-SOS.GetObservation-ResponseMatchingResponseMode.1">
			<ctl:param name="serviceURL"/>
			<ctl:assertion>The format of the response data matches the requested responseMode.</ctl:assertion>
			<ctl:comment>Check that the format of the response data matches the requested responseMode.  Pass if assertion holds; fail otherwise.</ctl:comment>
			<ctl:link title="Verify that the format of the response data matches the requested responseMode.">ATS_URL#SOS.GetObservation-ResponseMatchingResponseMode</ctl:link>
			<ctl:code>				<!-- response mode is per offering -->
				<ctl:message select="'*********************************'"/>
				<ctl:message select="'* This test not yet implemented *'"/>
				<ctl:message select="'*********************************'"/>
			</ctl:code>
		</ctl:test>
</ctl:package>